@page
@using System.Globalization
@using System.Reflection.Metadata
@using Ecommerce.Entity
@using Ecommerce.Entity.Common
@using Ecommerce.WebImpl.Pages.CustomerPartials
@using Ecommerce.WebImpl.Pages.Shared
@using Ecommerce.WebImpl.Pages.Shared.Order
@using Microsoft.AspNetCore.Http.Extensions
@using Org.BouncyCastle.Crypto.Engines
@model Ecommerce.WebImpl.Pages.Checkout

@section Scripts{
    @if (Model.SelectedTab == 1){
        <script>
            @if (Model.CurrentCustomer != null){
                <text>
                    document.addEventListener("DOMContentLoaded", ()=>{
                       document.querySelectorAll('.edit-control').forEach(e=>e.classList.remove('edit-control')); 
                    });
                </text>
            }
            let selectedTab = @(Model.SelectedTab -1 );
            let navTabs = [];
            document.addEventListener("DOMContentLoaded", () => {
                const c = document.getElementById('nav-tab').children;
                for (let i = 0; i < c.length; i++) {
                    if(c[i].nodeType === Node.ELEMENT_NODE)
                        navTabs[i] = c[i];
                }
            });
            function assignCheckoutInputs() {
                @{ var acsor = Model.CurrentCustomer == null ? "value" : "innerText";}
               const addrIdPostfix = @(Html.Raw(Model.CurrentCustomer!=null? "'address' + document.getElementById('customerAddress')._selectedIndex?.toString() ?? ''":"''"));
               @if (Model.CurrentCustomer == null){
                   <text>
                   document.getElementById('@(nameof(Checkout.Name))Input').value = document.getElementById('name').@acsor;
                   document.getElementById('@(nameof(Checkout.Email))Input').value= document.getElementById('email').@acsor;
                    </text>
               }
               document.getElementById('@(nameof(Address.City))Input').value = document.getElementById( '@(nameof(Address.City))_'+addrIdPostfix).@acsor;
               document.getElementById('@(nameof(Address.Line1))Input').value= document.getElementById('@nameof(Address.Line1)_' + addrIdPostfix).@acsor;
               document.getElementById('@nameof(Address.Line2)Input').value= document.getElementById('@nameof(Address.Line2)_' + addrIdPostfix).@acsor;
               document.getElementById('@(nameof(Address.District))Input').value = document.getElementById( '@nameof(Address.District)_' + addrIdPostfix).@acsor;
               document.getElementById('@(nameof(Address.ZipCode))Input').value = document.getElementById('@nameof(Address.ZipCode)_' + addrIdPostfix).@acsor;
               document.getElementById('@(nameof(Address.Country))Input').value = document.getElementById('@nameof(Address.Country)_' + addrIdPostfix).@acsor;
               document.getElementById('countrycodeInput').value = document.getElementById('@(nameof(PhoneNumber.CountryCode))').@acsor;
               document.getElementById('numberInput').value = document.getElementById('@(nameof(PhoneNumber.Number))').@acsor;
            }

            //# sourceURL=@(nameof(Checkout))_1.js

        </script>
    } else if (Model.SelectedTab == 2){
        <script>
            let selectedOffers = new Map();
            function selectOffer(event, sellerId){
                const old =event.currentTarget.parentElement._selectedGroup;
                if(old){
                    old.classList.remove('bg-secondary-subtle');
                    old.classList.add('bg-white');
                }
                
                event.currentTarget.parentElement._selectedGroup = event.currentTarget;
                event.currentTarget.classList.add('bg-secondary-subtle');
                event.currentTarget.classList.remove('bg-white');
                const offerId =  event.currentTarget.id.replace('offer-', '');
                selectedOffers.set(sellerId, offerId);
                document.getElementById('group-' + sellerId + '-input').value =offerId;
            }
            function selectGroup(event, sellerId){
                const old = document.getElementById('items')._active;
                if(old){
                    old.classList.remove('bg-secondary-subtle')                    
                    old.classList.add('bg-white');
                }
                event.currentTarget.classList.add('bg-secondary-subtle');
                event.currentTarget.classList.remove('bg-white');
                document.getElementById('items')._active = event.currentTarget;
                document.getElementById('offers')._active?.classList?.add('d-none');
                const _new = document.getElementById('offers-' + sellerId.toString());
                document.getElementById('offers')._active=_new;
                _new.classList.remove('d-none');
            }
            function assignShippingInputs(event){
                selectedOffers.forEach((v,k,_) => {
                    document.getElementById(`group-${k.toString()}-input`).value = v;
                });
                if(selectedOffers.size < @(Model.ShippingOffersGrouped.Count)){
                    alert("Lütfen Sepetinizdeki tüm satıcılar için kargo seçimi yapın.")
                    event.stopImmediatePropagation();
                    return;
                }
                
                // Show loading state
                const submitButton = event.target.querySelector('button[type="submit"]');
                const loadingElement = document.getElementById('shippingLoading');
                submitButton.disabled = true;
                submitButton.textContent = 'İşleniyor...';
                loadingElement.classList.remove('d-none');
            }
            //# sourceURL=@(nameof(Checkout))_2.js
        </script>
    }
    else if (Model.SelectedTab == 3){
        <script src="https://js.stripe.com/basil/stripe.js"></script>
        <script>
            let stripe = Stripe('@(ViewData["StripePublicKey"])')
            let elems;
            document.addEventListener("DOMContentLoaded", () => {
                elems = stripe.elements({
                    clientSecret: '@(ViewData["IntentSecret"] ?? throw new ArgumentNullException("IntentSecret"))',
                    customerSessionClientSecret: '@(ViewData["SessionSecret"]?? throw new ArgumentNullException("SessionSecret"))',
                    loader: 'always',
                });
                let paymentElement = elems.create('payment', {layout: 'accordion'});
                paymentElement.mount('#paymentElements');
            })
            async function sendPayment(e){
                e.preventDefault();
                e.stopImmediatePropagation();
                e.stopPropagation();
                
                // Show loading state
                const submitButton = document.getElementById('submitPayment');
                const loadingElement = document.getElementById('paymentLoading');
                submitButton.disabled = true;
                submitButton.textContent = 'İşleniyor...';
                loadingElement.classList.remove('d-none');
                
                const {error} = await stripe.confirmPayment({
                    elements: elems,
                    confirmParams: {
                        return_url: '@Html.Raw(ViewData["ReturnUrl"]??throw new ArgumentNullException())'
                    }
                });
                
                // Hide loading state if there's an error
                if (error) {
                    submitButton.disabled = false;
                    submitButton.textContent = 'Ödemeyi Onayla';
                    loadingElement.classList.add('d-none');
                }
            }
            //# sourceURL=@(nameof(Checkout))_3.js
            
        </script>
    } 
}
<div class="container-fluid">
    <nav>
        <div class="nav nav-tabs flex-row container-fluid align-content-center justify-content-center" id="nav-tab" role="tablist">
            <button disabled onclick="event.stopImmediatePropagation()" class="nav-link @(Model.SelectedTab==1?"active":"")" id="nav-info-tab" data-bs-toggle="tab" data-bs-target="#nav-info" type="button" role="tab" aria-controls="nav-info" aria-selected="true">Sepeti Onayla</button>
            <button disabled onclick="event.stopImmediatePropagation()" class="nav-link @(Model.SelectedTab==2?"active":"")" id="nav-shipment-tab" data-bs-toggle="tab" data-bs-target="#nav-shipment" type="button" role="tab" aria-controls="nav-shipment" aria-selected="false">Kargo Seçimi</button>
            <button disabled onclick="event.stopImmediatePropagation()" class="nav-link @(Model.SelectedTab==3?"active":"")" id="nav-payment-tab" data-bs-toggle="tab" data-bs-target="#nav-payment" type="button" role="tab" aria-controls="nav-payment" aria-selected="false">Ödeme</button>
            <button disabled onclick="event.stopImmediatePropagation()" class="nav-link @(Model.SelectedTab==4?"active":"")" id="nav-result-tab" data-bs-toggle="tab" data-bs-target="#nav-result" type="button" role="tab" aria-controls="nav-result" aria-selected="false">Siparişi Görüntüle</button>
        </div>
    </nav>
    <div class="tab-content" id="nav-tabContent">
        <div class="tab-pane section rounded fade @(Model.SelectedTab==1?"show active":"")" id="nav-info" role="tabpanel" aria-labelledby="nav-info-tab">
            @if (Model.SelectedTab == 1){
                <div class="row g-5">
                    <div class="col-12 p-3 col-lg-7">
                        <div class=" p-4 h-100">
                            @if (Model.CurrentCustomer == null)
                            {
                                <div class="mb-3 ps-3">
                                    <h2 class="align-self-start">İletişim Bilgilerini Gir</h2>
                                    <div class="d-flex mt-3 flex-column gap-3">
                                        <div class="d-inline-flex justify-content-between">
                                            <div class="gap-3">
                                                <label class="fs-5">İsim</label>
                                                <input id="name" class="border-1 mx-2 shadow rounded-1" type="text" placeholder="İsim"/>    
                                            </div>
                                            <div class="gap-3">
                                                <label class="fs-5">E-Posta</label>
                                                <input class="border-1 mx-2 shadow-sm" id="email" placeholder="Email" type="email"/>
                                            </div>
                                        </div>
                                        <div class="d-inline-flex gap-1">
                                            <label class="fs-5">Tel</label>
                                            @await Html.PartialAsync(nameof(_PhoneNumberPartial), new _PhoneNumberPartial(){ IsInput = true })
                                        </div>
                                    </div>
                                </div>
                                <div class="border-bottom my-3 border-secondary-subtle my-3 border-1"></div>
                            }
                            <div class="mb-3 gap-2">
                                <h2 class="align-self-start mx-3 mb-3">Teslimat Adresini @(Model.CurrentCustomer == null ? "Gir" : "Onayla")</h2>
                                <div id="address" class="mx-3">
                                    @if (Model.CurrentCustomer == null || Model.CurrentCustomer.Addresses.Count==0){
                                        if (Model.CurrentSeller!=null){
                                            <h3 class="fs-5 mb-0 ms-3">Kayıtlı Adresleriniz</h3>
                                            <p class="fs-6 text-muted mb-0 mt-1 ms-5">Kayıtsız adres ile işlem yapmak için düzenleyin.</p>
                                            
                                        }
                                        <partial name="Shared/_AddressPartial"
                                                 model="new _AddressPartial(){ Address = Model.CurrentCustomer?.PrimaryAddress ?? new Address(), Editable = true, AsInput=Model.CurrentCustomer==null }"/>
                                    }else {
                                        @await Html.PartialAsync("Shared/Customer/"+nameof(_CustomerAddressPartial), new _CustomerAddressPartial(){Addresses = Model.CurrentCustomer.Addresses, Updateable = false, Editable = true, CustomerId = Model.CurrentCustomer.Id})
                                    }
                                </div>
                            </div>
                            @if (Model.CurrentCustomer != null){
                                <div  class="m-3 gap-2">
                                    <h2 class="mx-1">Telefon Numaranı Onayla</h2>
                                    @await Html.PartialAsync(nameof(_PhoneNumberPartial), new _PhoneNumberPartial(){Editable = true, PhoneNumber = Model.CurrentCustomer.PhoneNumber})
                                </div>
                            }
                        </div>
                    </div>
                    <div class="col-12 border-start p-4 border-light-subtle border-2 col-lg-5">
                        <div class="h-100">
                            <ul class="list-group">
                                @foreach (var item in Model.Cart.Items)
                                {
                                    <li class="list-inline-item row mb-3">
                                        <!-- Product Image -->
                                        <div class="col-auto">
                                            
                                            <img src="@(Utils.GetImageUrlOrDefault(item.ProductOffer.Product.MainImage?.Data))" style="height: 10em;" class="img-fluid rounded" alt="image of @item.ProductOffer.Product.Name" />
                                        </div>
                                        <!-- Product Info -->
                                        <div class="col">
                                            <p class="fw-bold mb-1">@item.ProductOffer.Product.Name</p>
                                            <p class="text-muted mb-1">@item.ProductOffer.Seller.ShopName</p>
                                            <p class="text-success mb-1">
                                                @((item.ProductOffer.Price * item.ProductOffer.Discount * (item.Coupon?.DiscountRate ?? 1m)).ToString("C"))
                                            </p>
                                            <p class="mb-1">Adet: @item.Quantity</p>
                                            <p class="fw-semibold">Toplam: @decimal.Round(item.Aggregates.CouponDiscountedPrice,2).ToString("C")</p>
                                        </div>
                                    </li>
                                }
                            </ul>

                        </div>

                    </div>
                </div>

            }
        </div>
        
        <!--Shipment Tab-->
        
        <div class="tab-pane fade @(Model.SelectedTab==2?"active show":"")" id="nav-shipment" role="tabpanel" aria-labelledby="nav-shipment-tab">
            @if (Model.SelectedTab ==2){
                <!-- Loading Status for Shipping -->
                <div id="shippingLoading" class="d-none text-center mt-3 mb-4">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Yükleniyor...</span>
                    </div>
                    <p class="mt-2 text-muted">Kargo seçimleri işleniyor, lütfen bekleyin...</p>
                </div>
                
                <div class="container-fluid row g-4">
                    <div id="items" class="col-8 card-group d-flex flex-column list-unstyled px-5">
                        <h3 class="fw-bold fs-4">Ürün Paketleri</h3>
                        @foreach (var itemGroup in Model.CartItemsGrouped){
                            <div onclick="selectGroup(event, @(itemGroup.Key.Id))" style="cursor: pointer" id="group-@itemGroup.Key.Id" class="card border-start rounded">
                                <div class="mb-0 card-header bg-light py-1 d-inline-flex align-items-start align-content-start justify-content-between">
                                    <p class="fw-bold card-title mb-0 mt-1 fs-6">@itemGroup.Key.ShopName Satıcısının Ürünleri</p>
                                    <p class="text-muted fs-6 mb-0">@itemGroup.Key.Address.ToString()</p>
                                </div>
                                <ul class="card-body my-0 py-1">
                                    @foreach (var item in itemGroup.OrderBy(i => i.ProductId.GetHashCode())){
                                        <li class=" mb-1 d-flex flex-row justify-content-start text-center align-content-center align-items-center border-secondary-subtle hover-darken row">
                                            <div class="col-3  d-inline-flex justify-content-center align-content-center align-items-center p-0">
                                                <img class="img-fluid rounded-1" alt="@item.ProductOffer.Product.Name Resmi" src="@(Utils.GetImageUrlOrDefault(item.ProductOffer.Product.MainImage?.Data))"/>
                                            </div>
                                            <div class="col-2 d-inline-flex justify-content-center align-content-center align-items-center">
                                                <p class="fs-5">@(item.ProductOffer.Product.Name)</p>
                                            </div>
                                            <div class="col-3"></div>
                                            <div class="col-2">
                                                <p class="mb-0 fw-bold fs-6">@decimal.Round(item.ProductOffer.Product.Dimensions.Weight,1).ToString("F1") kg</p>
                                                <p class="mb-0 fw-bold fs-6">@decimal.Round(item.ProductOffer.Product.Dimensions.Width, 1).ToString("F1")x
                                                    @decimal.Round(item.ProductOffer.Product.Dimensions.Height, 1).ToString("F1")x
                                                    @decimal.Round(item.ProductOffer.Product.Dimensions.Depth,1).ToString("F1") cm<span class="float-end text-start ms-0  mt-0 p-0" style="font-size: x-small">3</span></p>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            </div>
                        }
                    </div>
                    <div class="col-4">
                        <h3 class="fw-bold fs-4">Kargo Teklifleri</h3>
                        <div id="offers" class="section p-0">
                            @foreach (var group in Model.ShippingOffersGrouped){
                                var seller = group.Key;
                                <ul class="list-group p-0 d-none rounded-3 shadow-sm" style="cursor: pointer;" id="offers-@(seller.Id)">
                                    @foreach (var offer in group){
                                        <li onclick="selectOffer(event, @(seller.Id))" id="offer-@(offer.Id)" class="hover-darken list-group-item border-0 mb-3 rounded-3 shadow-sm transition-all">
                                            <div class="card h-100">
                                                <div class="card-header bg-primary text-white text-center py-3">
                                                    <h5 class="mb-0 fw-bold">@offer.Provider.Name</h5>
                                                </div>
                                                <div class="card-body p-4">
                                                    <div class="row g-3">
                                                        <div class="col-12">
                                                            <div class="d-flex justify-content-between align-items-center">
                                                                <span class="text-muted">Kargo Ücreti:</span>
                                                                <span class="fw-bold fs-5 text-success">
                                                                    @offer.Price.ToString("C", offer.Currency switch{ "TL" => CultureInfo.GetCultureInfo("tr-TR"), "USD" => CultureInfo.GetCultureInfo("en-US") })
                                                                </span>
                                                            </div>
                                                        </div>
                                                        <div class="col-12">
                                                            <div class="d-flex justify-content-between align-items-center">
                                                                <span class="text-muted">Vergi:</span>
                                                                <span class="fw-semibold">
                                                                    @offer.Tax.ToString("C", offer.Currency switch{ "TL" => CultureInfo.GetCultureInfo("tr-TR"), "USD" => CultureInfo.GetCultureInfo("en-US") })
                                                                </span>
                                                            </div>
                                                        </div>
                                                        <div class="col-12">
                                                            <div class="d-flex justify-content-between align-items-center">
                                                                <span class="text-muted">Teslimat Süresi:</span>
                                                                <span class="fw-semibold text-info">
                                                                    @(offer.DeliveryTime.Day) Gün @(offer.DeliveryTime.Hour) Saat
                                                                </span>
                                                            </div>
                                                        </div>
                                                        <div class="col-12 mt-3">
                                                            <hr class="my-2">
                                                            <div class="d-flex justify-content-between align-items-center">
                                                                <span class="fw-bold">Toplam:</span>
                                                                <span class="fw-bold fs-4 text-primary">
                                                                    @((offer.Price + offer.Tax).ToString("C", offer.Currency switch{ "TL" => CultureInfo.GetCultureInfo("tr-TR"), "USD" => CultureInfo.GetCultureInfo("en-US") }))
                                                                </span>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </li>
                                    }
                                </ul>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="tab-pane fade @(Model.SelectedTab==3?"show active":"")" id="nav-payment" role="tabpanel" aria-labelledby="nav-payment-tab">
            @if (Model.SelectedTab == 3){
                <div class="container-fluid">
                    <!-- Order Total Display -->
                    <div class="card mb-4 shadow-sm">
                        <div class="card-header bg-light">
                            <h5 class="mb-0 fw-bold">Sipariş Özeti</h5>
                        </div>
                        <div class="card-body">
                            @{
                                var shippingCost = Model.ShippingCost;
                                var itemsCost = Model.ItemsCost;
                            }
                            <div class="row">
                                <div class="col-8">
                                    <p class="mb-1">Ürün Toplamı:</p>
                                    <p class="mb-1">Kargo Ücreti:</p>
                                    <hr>
                                    <p class="fw-bold fs-5 mb-0">Ödenecek Toplam:</p>
                                </div>
                                <div class="col-4 text-end">
                                    <p class="mb-1">@itemsCost.ToString("C")</p>
                                    <p class="mb-1">@(shippingCost.ToString("C"))</p>
                                    <hr>
                                    <p class="fw-bold fs-4 text-success mb-0">@((itemsCost + shippingCost).ToString("C"))</p>
                                </div>
                            </div>
                        </div>
                    </div>
                    
                    <form class="container-fluid" id="paymentForm">
                        <div id="paymentElements">
                        </div>
                        
                        <!-- Loading Status -->
                        <div id="paymentLoading" class="d-none text-center mt-3">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Yükleniyor...</span>
                            </div>
                            <p class="mt-2 text-muted">Ödemeniz işleniyor, lütfen bekleyin...</p>
                        </div>
                        
                        <div class="d-flex mt-3 container-fluid justify-content-center align-content-center">
                            <button class="btn btn-lg btn-primary" type="button" onclick="sendPayment(event)" id="submitPayment">Ödemeyi Onayla</button>
                        </div>
                        <div id="mt-2 errorMessage" class="container-fluid"></div>
                    </form>
                </div>
            }
        </div>
        <div class="tab-pane fade @(Model.SelectedTab == 4 ? "show active" : "")" id="nav-result" role="tabpanel" aria-labelledby="nav-result-tab">
            @if (Model.SelectedTab == 4){

                <div class="container-fluid ps-5">
                    @{ var (title, text) = Model.OrderResult switch{
                           Checkout.Result.Success => ("Sipariş Başarılı", "Siparişiniz başarı ile tamamlandı ve satıcıya bildirildi. Sipariş detaylarını aşağıda görüntüleyebilirsiniz"),
                           Checkout.Result.Fail => ("Ödeme Başarısız", "Ödemeniz başarısız, lütfen tekrar deneyin"),
                           Checkout.Result.NonExistent => ("Aktif Sipariş Yok", "İşlenmekte olan aktif siparişiniz yok. Lütfen yeni sipariş oluşturun")
                       };
                    }
                    <div class="container-fluid mb-3">
                        <p class="fs-3 text-center w-100 fw-bold ms-2">@title</p>
                        @await Html.PartialAsync("Shared/_SeperatorPartial", (3,4, "text-dark"))
                        <p class="text-start fs-5">@text</p>
                        <div class="card container-fluid pt-2 rounded-3 mx-0 mt-3 shadow-lg">
                            <div class="container-fluid d-flex justify-content-start mb-3">
                                <p class="fs-4 fw-bold">Sipariş Detayları</p>
                            </div>
                            <div id="order">
                                @await Html.PartialAsync("Shared/Order/_OrderListPartial", new _OrderListPartial{
                                    Orders = [Model.CreatedOrder],
                                    Url = null,
                                    Collapsable = false
                                })
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
          <!--Controls-->
        <div class="container-fluid mt-4">
            <div class="d-flex ms-5 justify-content-@(Model.SelectedTab > 1?"between":"end") align-items-center">
                @if (Model.SelectedTab > 1){
                    <button class="btn d-none btn-outline-secondary" onclick="window.history.back()">Geri</button>
                }
                @if (Model.SelectedTab <=2){
                    var query = Model.SelectedTab switch{1=>"",2=>"?handler=shipment",_=>throw new ArgumentOutOfRangeException()};
                    <form onsubmit="@Html.Raw(Model.SelectedTab switch{1=>"assignCheckoutInputs()",2=>"assignShippingInputs(event)"})" id="tab1-2Form" hx-post="/@(nameof(Checkout))@(query)" hx-target="#InfoErrorResult" hx-swap="innerHTML">
                        @Html.AntiForgeryToken()
                        <input id="@nameof(Address.City)Input" type="hidden" name="@(nameof(Checkout.Address)).@(nameof(Address.City))" value="@(Model.Address?.City)"/>
                        <input id="@nameof(Address.District)Input" type="hidden" name="@(nameof(Checkout.Address)).@(nameof(Address.District))" value="@(Model.Address?.District)"/>
                        <input id="@nameof(Address.Line1)Input" type="hidden" name="@(nameof(Checkout.Address)).@(nameof(Address.Line1))" value="@(Model.Address?.Line1)"/>
                        <input id="@(nameof(Address.Line2))Input" type="hidden" name="@(nameof(Checkout.Address)).@(nameof(Address.Line2))" value="@(Model.Address?.Line2)"/>
                        <input id="@nameof(Address.Country)Input" type="hidden" name="@(nameof(Checkout.Address)).@(nameof(Address.Country))" value="@(Model.Address?.Country)"/>
                        <input id="@nameof(Address.ZipCode)Input" type="hidden" name="@(nameof(Checkout.Address)).@(nameof(Address.ZipCode))" value="@(Model.Address?.ZipCode)"/>
                        <input id="@(nameof(Checkout.Name))Input" type="hidden" name="@nameof(Checkout.Name)" value="@(Model.Name)"/>
                        <input id="@(nameof(Checkout.Email))Input" type="hidden" name="@(nameof(Checkout.Email))" value="@Model.Email"/>
                        <input id="countrycodeInput" type="hidden" name="@(nameof(Checkout.PhoneNumber)).@nameof(PhoneNumber.CountryCode)" value="@(Model.PhoneNumber?.CountryCode)"/>
                        <input id="numberInput" type="hidden" name="@(nameof(Checkout.PhoneNumber)).@(nameof(PhoneNumber.Number))" value="@(Model.PhoneNumber?.Number)"/>
                        <input type="hidden" name="@(nameof(Checkout.OrderId))" value="@(Model.OrderId)"/>
                        @if (Model.SelectedTab == 2){
                        foreach (var itemGroup in Model.ShippingOffersGrouped){
                            <input type="hidden" id="group-@(itemGroup.Key.Id)-input" name="@(nameof(Checkout.SelectedShippingOffers))[@(itemGroup.Key.Id)]" value="@(itemGroup.First().Id)"/>
                        }    
                        }
                        <button class="btn  btn-success btn-lg" type="submit">@(Model.SelectedTab switch{1=>"Bilgilerini Onayla", 2=>"Seçimleri Onayla",_=>throw new ArgumentOutOfRangeException()})</button>
                    </form>
                } 
            </div>
            <div class="d-flex justify-content-center align-items-center mt-3">
                <div id="InfoErrorResult">
                </div>
            </div>
        </div>
</div>
