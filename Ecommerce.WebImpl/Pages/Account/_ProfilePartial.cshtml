@using Ecommerce.Entity
@using Ecommerce.Entity.Common
@using Ecommerce.WebImpl.Pages.CustomerPartials
@using Ecommerce.WebImpl.Pages.Shared
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Html
@using Customer = Ecommerce.WebImpl.Pages.User
@model Ecommerce.WebImpl.Pages.Account._ProfilePartial
@{ var editable = Model.Editable;
    var customer = Model.User as Entity.Customer;
    var seller = Model.User as Entity.Seller;
    var role = Model.User.GetType().Name.Split('.').Last();
    var prefix ="Registered"+ role;
}
@functions{
    IHtmlContent SectionHeader(string title, string? iconClass = null) {
        return Html.Raw($""""
            <div class="card-header d-inline-flex justify-content-end border-bottom-0 py-3 text-end bg-white">
                <div class="gap-2 d-inline-flex flex-row align-items-center">
                    <h5 class="card-title fs-4 fw-bold me-4">{title}</h5>{(iconClass != null ? $"<i class='{iconClass}'></i>" : "")}
                </div>
            </div>
            <div class="border-dark-subtle border-bottom border-2 mx-4"></div>
        """");
    }
}

<div id="profil@(Model.User.Id)" class="profile-container partial-parent">
    <script>
        ((currentScript)=>{
            const parent= currentScript.parentElement;
            document.addEventListener("DOMContentLoaded", ()=>{
                @if (Model.Registering){
                <text>document.dispatchEvent(new Event('editControl', {cancelable:false, bubbles:false}));
                    document.getElementById('profilePic').parentElement.nextElementSibling.classList.toggle('edit-control');
                </text>
                }
                parent._additionalData = {};
            })
            currentScript.parentElement.addEventListener('submit', function () {
                let profileData = {
                    '@(nameof(Register.Role))': '@(role)',
                    '@(prefix).@(nameof(Entity.User.GoogleId))': '@Model.User.GoogleId',
                    '@(prefix).@(nameof(Entity.Customer.Id))': '@Model.User.Id',
                    '@(prefix).@(nameof(Entity.Customer.NormalizedEmail))': '@Model.User.NormalizedEmail',
                    '@(prefix).@(nameof(Entity.Customer.Email))': '@Model.User.Email',
                    '@(prefix).@(nameof(Model.User.FirstName))': document.getElementById('p_@(nameof(Model.User.FirstName))').innerHTML,
                    '@(prefix).@(nameof(Model.User.LastName))': document.getElementById('p_@(nameof(Model.User.LastName))').innerHTML,
                    '@(prefix).@(nameof(Model.User.PhoneNumber)).@(nameof(PhoneNumber.CountryCode))': document.getElementById('@(nameof(PhoneNumber.CountryCode))').innerHTML.replaceAll(new RegExp('\\D', 'g'), ''),
                    '@(prefix).@(nameof(Model.User.PhoneNumber)).@(nameof(PhoneNumber.Number))': document.getElementById('@(nameof(PhoneNumber.Number))').innerHTML.replaceAll(new RegExp('\\D', 'g'), ''),
                    '@(nameof(Customer.IsImageEdited))': _p_editedImage@(Model.User.Id).toString()
                };
                // if(!profileData['@(prefix).@(nameof(Model.User.PhoneNumber)).@(nameof(PhoneNumber.Number))'] || !profileData['@(prefix).@(nameof(Model.User.PhoneNumber)).@(nameof(PhoneNumber.CountryCode))']
                // || profileData['@(prefix).@(nameof(Model.User.PhoneNumber)).@(nameof(PhoneNumber.Number))']>3 || !(profileData['@(prefix).@(nameof(Model.User.PhoneNumber)).@(nameof(PhoneNumber.Number))']).match(new RegExp('\\d{10}'))) {
                //     alert("Lütfen Geçerli Bir Telefon Numarası Girin.")
                // }
                @if (Model.Registering && Model.User.ProfilePicture != null){
                    <text>profileData['@(prefix).@(nameof(Entity.User.ProfilePicture)).@(nameof(Image.Data))'] = '@Model.User.ProfilePicture.Data';</text>
                }
           
                const userProps = [@Html.Raw(string.Join(',',typeof(Entity.Customer).GetProperties().Select(p => $"'{p.Name}'")))];
                for (const [k,v] of Object.entries(parent._additionalData ||{})) {
                    profileData[ (userProps.some(p=>p===k)?'@(prefix).':'') + k] = v;
                }
                profileData = {
                    ...profileData
                };
                
                // Add profile picture if edited
                if (parent._pp) {
                    profileData['@(prefix).@(nameof(Entity.Customer.ProfilePicture)).@(nameof(Image.Data))'] = parent._pp;
                }

                @if (customer != null) {
                <text>
                // Collect address data from CustomerAddressPartial element-object model
                const customerAddressElement = document.getElementById('customerAddresses').querySelector('.customerAddresses');
                if (customerAddressElement && customerAddressElement._addresses) {
                    customerAddressElement._addresses.forEach((addressElement, index) => {
                        const addressContainer = addressElement.querySelector('.address-container');
                        if (addressContainer) {
                            profileData['@(prefix).@(nameof(Entity.Customer.Addresses))[' +index + '].@(nameof(Address.Line1))'] = addressContainer._line1 || '';
                            profileData['@(prefix).@(nameof(Entity.Customer.Addresses))[' +index + '].@(nameof(Address.Line2))'] = addressContainer._line2 || '';
                            profileData['@(prefix).@(nameof(Entity.Customer.Addresses))[' +index + '].@(nameof(Address.District))'] = addressContainer._district || '';
                            profileData['@(prefix).@(nameof(Entity.Customer.Addresses))[' +index + '].@(nameof(Address.City))'] = addressContainer._city || '';
                            profileData['@(prefix).@(nameof(Entity.Customer.Addresses))[' +index + '].@(nameof(Address.Country))'] = addressContainer._country || '';
                            profileData['@(prefix).@(nameof(Entity.Customer.Addresses))[' +index + '].@(nameof(Address.ZipCode))'] = addressContainer._zipCode || '';
                            if (addressContainer._apiId) {
                                profileData['@(prefix).@(nameof(Entity.Customer.Addresses))[' + index + '].@(nameof(Address.ApiId))'] = addressContainer._apiId;
                            }
                        }
                    });
                }
                </text>
                } else if(seller!=null){
                <text>
                profileData['@(prefix).@(nameof(Entity.Seller)).@(nameof(Seller.ShopName))'] = document.getElementById('shopname').value;
                const addressContainer = document.getElementById('sellerAddress').querySelector('.address-container');
                profileData['@(prefix).@(nameof(Entity.Seller.Address)).@(nameof(Address.Line1))'] = addressContainer._line1 || '';
                profileData['@(prefix).@(nameof(Entity.Seller.Address)).@(nameof(Address.Line2))'] = addressContainer._line2 || '';
                profileData['@(prefix).@(nameof(Entity.Seller.Address)).@(nameof(Address.District))'] = addressContainer._district || '';
                profileData['@(prefix).@(nameof(Entity.Seller.Address)).@(nameof(Address.City))'] = addressContainer._city || '';
                profileData['@(prefix).@(nameof(Entity.Seller.Address)).@(nameof(Address.Country))'] = addressContainer._country || '';
                profileData['@(prefix).@(nameof(Entity.Seller.Address)).@(nameof(Address.ZipCode))'] = addressContainer._zipCode || '';
                if (addressContainer._apiId) {
                    profileData['@(prefix).@(nameof(Entity.Seller.Address)).@(nameof(Address.ApiId))'] = addressContainer._apiId;
                }
                </text>
                }

                // Get anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                // Create form data
                profileData['__RequestVerificationToken'] =  token;

                // Submit with fetch
                htmx.ajax('POST','@Model.PostUrl', {
                    values: profileData,
                    target:'#popupResult',
                    swap:'innerHTML',
                    headers: {'Content-Type': 'application/x-www-form-urlencoded'}
                })
            });
        })(document.currentScript)
    let _p_editedImage@(Model.User.Id) = @(Model.Registering.ToString().ToLowerInvariant());
    //# sourceURL=@(nameof(_ProfilePartial)).js
</script>

<ul class="list-group gap-4 rounded-0">
    <li class="card shadow-sm rounded-3 pt-4">
        @(SectionHeader("Kişisel Bilgiler", "bi-person fs-3 text-primary bg-white"))
        <div class="container-fluid mt-4 pt-1 mb-4 row g-4">
            <div class="col-5 pt-2 d-inline-flex flex-column justify-content-between gap-5 h-100 ps-3">
                <div class="d-flex container-fluid justify-content-between p-3 bg-light rounded-2 mb-3 shadow-sm">
                    <label class="fw-bold fs-5 text-primary">İsim:</label>
                    <div class="d-inline-flex">
                        <p id="p_@(nameof(Model.User.FirstName))" class="fs-5">@(Model.User.FirstName)</p>
                        @if (editable){
                            @await Html.PartialAsync("Shared/_EditablePartial", new _EditablePartial())
                        }
                    </div>
                </div>
                <div class="d-flex container-fluid justify-content-between p-3 bg-light rounded-2 mb-3 shadow-sm">
                    <label class="fw-bold fs-5 text-primary">Soyisim:</label>
                    <div class="d-inline-flex">
                        <p id="p_@(nameof(Model.User.LastName))" class="fs-5">@(Model.User.LastName)</p>
                        @if (editable){
                            @await Html.PartialAsync("Shared/_EditablePartial", new _EditablePartial())
                        }
                    </div>
                </div>
            </div>
            <div class="col-3"></div>
            <div class="col-4 me-0 pe-0 row">
                <div class="col-9">
                    <img id="profilePic" class="card-img img-fluid shadow-sm rounded-circle shadow-sm border border-primary" style="max-height: 350px;" src="@(Utils.GetImageUrlOrDefault(Model.User.ProfilePicture?.Data, false))"
                         alt="Profil Resmi"/>
                </div>
                @if (editable){
                    <div class="edit-control col-3 gap-3 justify-content-center">
                        <button onclick="_p_editedImage@(Model.User.Id)=true;const parent=event.currentTarget.closest('.partial-parent');promptFile().then(f=>{document.getElementById('profilePic').src=f;parent._pp=f;});" class="btn btn-sm mb-3 btn-outline-primary p-2 border-2 border-light border-opacity-50 shadow-sm rounded-3 w-100">
                            Değiştir
                            @* <i class="col-auto bi bi-pencil-fill bg-white text-secondary"></i> *@
                        </button>
                        <button onclick="_p_editedImage@(Model.User.Id)=true;event.currentTarget.closest('.partial-parent')._pp='-';document.getElementById('profilePic').src = '/user-icon.svg'" class="col-auto p-2 btn-sm rounded-3 w-100 btn btn-outline-danger shadow-sm border-2 border-light border-opacity-50">
                            Sil
                            @* <i class="col-auto bi bi-pencil-fill bg-white text-danger"></i> *@
                        </button>
                    </div>
                }
            </div>
        </div>
    </li>
    @if (customer!=null && editable){
        <li class="card shadow-sm rounded-3" id="customerAddresses">
            @SectionHeader("Adresler", "fs-3 bi bi-building text-primary bg-white")
            @await Html.PartialAsync("Customer/_CustomerAddressPartial", new _CustomerAddressPartial(){
                CustomerId = Model.User.Id, Editable = Model.Editable, Updateable = false, Addresses = customer.Addresses
            })
        </li>
    }else if (seller != null && editable){
        <div class="card shadow-sm mb-4 rounded-3" id="sellerAddress">
            <div class="card-header bg-light border-0 rounded-top-3">
                <div class="d-flex align-items-center justify-content-between p-3">
                    <h4 class="mb-0 fw-bold text-primary">
                        <i class="bi bi-shop me-3 text-primary"></i>
                        Mağaza Bilgileri
                    </h4>
                </div>
            </div>
            <div class="d-inline-flex form-check-inline">
                <label class="fs-4 shadow-sm ms-4 mt-1 rounded-2 bg-light-subtle col-form-label-sm col-2">Mağaza İsmi</label>
                <input type="text" id="shopname" class="form-control-sm ms-2 rounded-2 border-light-subtle border-opacity-50 shadow-sm border-2" name="@(nameof(Pages.User)).@(nameof(Seller.ShopName))"/>
                </div>
            <div class="card-body p-4">
                @await Html.PartialAsync("Shared/_AddressPartial", new _AddressPartial(){
                    Address = seller.Address, Editable = true,
                })
            </div>
        </div>
    }
    <li class="card justify-content-end">
        @SectionHeader("Telefon Numarası", "fs-3 bi bi-telephone-fill text-primary bg-white")
        @{
            var num = Model.User.PhoneNumber.Number.Replace("(", "").Replace(")", "");
            num = !editable
                ? num.Substring(0, 3) + string.Concat(Enumerable.Range(0, num.Length - 3).Select(_ => '*'))
                : num;
        }
        <div class="container-fluid d-flex justify-content-end align-content-center align-items-center mt-1 p-3 me-3    gap-3 shadow-sm">
            @await Html.PartialAsync("Shared/_PhoneNumberPartial", new _PhoneNumberPartial(){
                Editable = true, PhoneNumber = Model.User.PhoneNumber
            })
        </div>
    </li>

</ul>
</div>
