@using Ecommerce.Entity
@using Ecommerce.Entity.Common
@using Ecommerce.WebImpl.Pages.CustomerPartials
@using Ecommerce.WebImpl.Pages.Shared
@using Microsoft.AspNetCore.Components
@using Microsoft.AspNetCore.Html
@using Customer = Ecommerce.WebImpl.Pages.User
@model Ecommerce.WebImpl.Pages.Account._ProfilePartial
@{ var editable = Model.Editable;
    var customer = Model.User as Entity.Customer;
    var seller = Model.User as Entity.Seller;
    var role = Model.User.GetType().Name.Split('.').Last();
    var prefix ="Registered"+ role;
}
@functions{
    IHtmlContent SectionHeader(string title, string? iconClass = null) {
        return Html.Raw($""""
            <div class="card-header d-inline-flex justify-content-end border-bottom-0 py-3 text-end bg-white">
                <div class="gap-2 d-inline-flex flex-row align-items-center">
                    <h5 class="card-title fs-4 fw-bold me-4">{title}</h5>{(iconClass != null ? $"<i class='{iconClass}'></i>" : "")}
                </div>
            </div>
            <div class="border-dark-subtle border-bottom border-2 mx-4"></div>
        """");
    }
}

<div id="profil@(Model.User.Id)" class="profile-container partial-parent">
    <script>
    document.addEventListener("DOMContentLoaded", ()=>{
        @if (Model.Registering){
            <text>document.dispatchEvent(new Event('editControl', {cancelable:false, bubbles:false}));</text>
        }
    })
    document.currentScript.parentElement.addEventListener('submit', function () {
        console.log('submitting profile');
        
        // Collect profile data
        const profileData = {
            '@(nameof(Register.Role))': '@(role)',
            '@(prefix).@(nameof(Entity.User.GoogleId))': '@Model.User.GoogleId',
            '@(prefix).@(nameof(Entity.Customer.Id))': '@Model.User.Id',
            '@(prefix).@(nameof(Entity.Customer.NormalizedEmail))': '@Model.User.NormalizedEmail',
            '@(prefix).@(nameof(Entity.Customer.Email))': '@Model.User.Email',
            '@(prefix).@(nameof(Model.User.FirstName))': document.getElementById('p_@(nameof(Model.User.FirstName))').innerHTML,
            '@(prefix).@(nameof(Model.User.LastName))': document.getElementById('p_@(nameof(Model.User.LastName))').innerHTML,
            '@(prefix).@(nameof(Model.User.PhoneNumber)).@(nameof(PhoneNumber.CountryCode))': document.getElementById('@(nameof(PhoneNumber.CountryCode))').innerHTML,
            '@(prefix).@(nameof(Model.User.PhoneNumber)).@(nameof(PhoneNumber.Number))': document.getElementById('@(nameof(PhoneNumber.Number))').innerHTML,
            '@(nameof(Customer.IsImageEdited))': _p_editedImage@(Model.User.Id).toString()
        };
        
        // Add seller-specific fields
        @if (seller != null) {
        <text>
        profileData['@(prefix).@(nameof(Entity.Seller.ShopName))'] = document.getElementById('p_@(nameof(Entity.Seller.ShopName))').innerHTML;
        </text>
        }
        
        profileData = {
            ...profileData
        };
        
        // Add profile picture if edited
        const profilePicInput = document.getElementById('p_@(nameof(Model.User.ProfilePicture))');
        if (profilePicInput && profilePicInput.value) {
            profileData['@(prefix).@(nameof(Entity.Customer.ProfilePicture)).@(nameof(Image.Data))'] = profilePicInput.value;
        }
        
        @if (customer != null) {
        <text>
        // Collect address data from CustomerAddressPartial element-object model
        const customerAddressElement = document.getElementById('customerAddresses').querySelector('.customerAddresses');
        if (customerAddressElement && customerAddressElement._addresses) {
            customerAddressElement._addresses.forEach((addressElement, index) => {
                const addressContainer = addressElement.querySelector('.address-container');
                if (addressContainer) {
                    profileData['@(prefix).@(nameof(Entity.Customer.Addresses))[' +index + '].@(nameof(Address.Line1))'] = addressContainer._line1 || '';
                    profileData['@(prefix).@(nameof(Entity.Customer.Addresses))[' +index + '].@(nameof(Address.Line2))'] = addressContainer._line2 || '';
                    profileData['@(prefix).@(nameof(Entity.Customer.Addresses))[' +index + '].@(nameof(Address.District))'] = addressContainer._district || '';
                    profileData['@(prefix).@(nameof(Entity.Customer.Addresses))[' +index + '].@(nameof(Address.City))'] = addressContainer._city || '';
                    profileData['@(prefix).@(nameof(Entity.Customer.Addresses))[' +index + '].@(nameof(Address.Country))'] = addressContainer._country || '';
                    profileData['@(prefix).@(nameof(Entity.Customer.Addresses))[' +index + '].@(nameof(Address.ZipCode))'] = addressContainer._zipCode || '';
                    if (addressContainer._apiId) {
                        profileData['@(prefix).@(nameof(Entity.Customer.Addresses))[' + index + '].@(nameof(Address.ApiId))'] = addressContainer._apiId;
                    }
                }
            });
        }
        </text>
        } else if(seller!=null){
        <text>
        
        const addressContainer = document.getElementById('sellerAddress').querySelector('.address-container');
        profileData['@(prefix).@(nameof(Entity.Seller.Address)).@(nameof(Address.Line1))'] = addressContainer._line1 || '';
        profileData['@(prefix).@(nameof(Entity.Seller.Address)).@(nameof(Address.Line2))'] = addressContainer._line2 || '';
        profileData['@(prefix).@(nameof(Entity.Seller.Address)).@(nameof(Address.District))'] = addressContainer._district || '';
        profileData['@(prefix).@(nameof(Entity.Seller.Address)).@(nameof(Address.City))'] = addressContainer._city || '';
        profileData['@(prefix).@(nameof(Entity.Seller.Address)).@(nameof(Address.Country))'] = addressContainer._country || '';
        profileData['@(prefix).@(nameof(Entity.Seller.Address)).@(nameof(Address.ZipCode))'] = addressContainer._zipCode || '';
        if (addressContainer._apiId) {
            profileData['@(prefix).@(nameof(Entity.Seller.Address)).@(nameof(Address.ApiId))'] = addressContainer._apiId;
        }
        </text>
        }
        
        // Get anti-forgery token
        const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
        
        // Create form data
        const formData = new FormData();
        formData.append('__RequestVerificationToken', token);
        
        // Add all profile data to form
        Object.entries(profileData).forEach(([key, value]) => {
            if (value !== null && value !== undefined) {
                formData.append(key, value);
            }
        });
        
        // Submit with fetch
        fetch('@Model.PostUrl', {
            method: 'POST',
            body: formData
        })
        .then(response => response.text())
        .then(html => {
            document.getElementById('popupResult').innerHTML = html;
        })
        .catch(error => {
            console.error('Error submitting profile:', error);
            document.getElementById('popupResult').innerHTML = '<div class="alert alert-danger">Bir hata oluştu. Lütfen tekrar deneyin.</div>';
        });
    });
    
    let _p_editedImage@(Model.User.Id) = @Model.Registering;
</script>

    <style>
        .profile-container {
            transition: all 0.3s ease;
        }
        .profile-card {
            transition: all 0.3s ease;
            border: none;
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }
        .profile-card:hover {
            box-shadow: 0 4px 16px rgba(0,0,0,0.15);
            transform: translateY(-2px);
        }
        .profile-section-header {
            background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
            border-bottom: 2px solid #dee2e6;
        }
        .profile-info-item {
            transition: background-color 0.2s ease;
            border-radius: 8px;
            padding: 12px;
        }
        .profile-info-item:hover {
            background-color: #f8f9fa;
        }
        .profile-image-container {
            position: relative;
            overflow: hidden;
            border-radius: 50%;
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
            transition: transform 0.3s ease;
        }
        .profile-image-container:hover {
            transform: scale(1.05);
        }
        .profile-image {
            transition: transform 0.3s ease;
        }
        .edit-buttons {
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        .profile-card:hover .edit-buttons {
            opacity: 1;
        }
    </style>

    <div class="card profile-card mb-4 rounded-3">
        <div class="card-header profile-section-header border-0 rounded-top-3">
            <div class="d-flex align-items-center justify-content-between p-3">
                <h4 class="mb-0 fw-bold text-dark">
                    <i class="bi bi-person-circle me-3 text-primary"></i>
                    Kişisel Bilgiler
                </h4>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row g-4 align-items-center">
                <div class="col-lg-7">
                    <div class="row g-3">
                        <div class="col-12">
                            <div class="profile-info-item d-flex justify-content-between align-items-center">
                                <label class="fw-semibold text-muted mb-0">İsim:</label>
                                <div class="d-flex align-items-center">
                                    <span id="p_@(nameof(Model.User.FirstName))" class="fs-5 fw-medium text-dark me-2">@(Model.User.FirstName)</span>
                                    @if (editable){
                                        @await Html.PartialAsync("Shared/_EditablePartial", new _EditablePartial())
                                    }
                                </div>
                            </div>
                        </div>
                        <div class="col-12">
                            <div class="profile-info-item d-flex justify-content-between align-items-center">
                                <label class="fw-semibold text-muted mb-0">Soyisim:</label>
                                <div class="d-flex align-items-center">
                                    <span id="p_@(nameof(Model.User.LastName))" class="fs-5 fw-medium text-dark me-2">@(Model.User.LastName)</span>
                                    @if (editable){
                                        @await Html.PartialAsync("Shared/_EditablePartial", new _EditablePartial())
                                    }
                                </div>
                            </div>
                        </div>
                        @if (seller != null) {
                            <div class="col-12">
                                <div class="profile-info-item d-flex justify-content-between align-items-center">
                                    <label class="fw-semibold text-muted mb-0">Mağaza Adı:</label>
                                    <div class="d-flex align-items-center">
                                        <span id="p_@(nameof(Entity.Seller.ShopName))" class="fs-5 fw-medium text-dark me-2">@(seller.ShopName)</span>
                                        @if (editable){
                                            @await Html.PartialAsync("Shared/_EditablePartial", new _EditablePartial())
                                        }
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
                <div class="col-lg-5 text-center">
                    <div class="position-relative d-inline-block">
                        <div class="profile-image-container" style="width: 150px; height: 150px;">
                            <img id="profilePic" class="profile-image w-100 h-100 object-fit-cover"
                                 src="@(Utils.GetImageUrlOrDefault(Model.User.ProfilePicture?.Data, false))"
                                 alt="Profil Resmi"/>
                        </div>
                        @if (editable){
                            <div class="edit-buttons position-absolute bottom-0 end-0">
                                <div class="btn-group-vertical shadow-sm">
                                    <button onclick="_p_editedImage@(Model.User.Id)=true;promptFile().then(f=>{document.getElementById('profilePic').src=f;document.getElementById('p_@(nameof(Model.User.ProfilePicture))').value=f;});"
                                            class="btn btn-sm btn-primary rounded-circle p-2 mb-1" title="Değiştir">
                                        <i class="bi bi-camera-fill"></i>
                                    </button>
                                    <button onclick="_p_editedImage@(Model.User.Id)=true;document.getElementById('p_@(nameof(Model.User.ProfilePicture))').value='-';document.getElementById('profilePic').src = '/user-icon.svg'"
                                            class="btn btn-sm btn-danger rounded-circle p-2" title="Sil">
                                        <i class="bi bi-trash-fill"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    @if (customer != null && editable){
        <div class="card profile-card mb-4 rounded-3" id="customerAddresses">
            <div class="card-header profile-section-header border-0 rounded-top-3">
                <div class="d-flex align-items-center justify-content-between p-3">
                    <h4 class="mb-0 fw-bold text-dark">
                        <i class="bi bi-geo-alt-fill me-3 text-primary"></i>
                        Adresler
                    </h4>
                </div>
            </div>
            <div class="card-body p-4">
                @await Html.PartialAsync("Customer/_CustomerAddressPartial", new _CustomerAddressPartial(){
                    CustomerId = Model.User.Id, Editable = Model.Editable, Updateable = false, Addresses = customer.Addresses
                })
            </div>
        </div>
    }
    else if (seller != null && editable){
        <div class="card profile-card mb-4 rounded-3" id="sellerAddress">
            <div class="card-header profile-section-header border-0 rounded-top-3">
                <div class="d-flex align-items-center justify-content-between p-3">
                    <h4 class="mb-0 fw-bold text-dark">
                        <i class="bi bi-shop me-3 text-primary"></i>
                        Mağaza Adresi
                    </h4>
                </div>
            </div>
            <div class="card-body p-4">
                @await Html.PartialAsync("Shared/_AddressPartial", new _AddressPartial(){
                    Address = seller.Address, Editable = true,
                })
            </div>
        </div>
    }
    <div class="card profile-card mb-4 rounded-3">
        <div class="card-header profile-section-header border-0 rounded-top-3">
            <div class="d-flex align-items-center justify-content-between p-3">
                <h4 class="mb-0 fw-bold text-dark">
                    <i class="bi bi-telephone-fill me-3 text-primary"></i>
                    Telefon Numarası
                </h4>
            </div>
        </div>
        <div class="card-body p-4">
            @{
                var num = Model.User.PhoneNumber.Number.Replace("(", "").Replace(")", "");
                num = !editable
                    ? num.Substring(0, 3) + string.Concat(Enumerable.Range(0, num.Length - 3).Select(_ => '*'))
                    : num;
            }
            <div class="profile-info-item border rounded-3 p-3">
                @await Html.PartialAsync("Shared/_PhoneNumberPartial", new _PhoneNumberPartial(){
                    Editable = true, PhoneNumber = Model.User.PhoneNumber
                })
            </div>
        </div>
    </div>

    @Html.AntiForgeryToken()
    <input id="p_@(nameof(Model.User.ProfilePicture))" type="hidden" @Html.Raw(Model.Registering && Model.User.ProfilePicture?.Data!=null?@$"value=""{Model.User.ProfilePicture?.Data}""":"")/>
</div>
