@using Ecommerce.Entity.Common
@using Ecommerce.WebImpl.Pages.Shared
@model Ecommerce.WebImpl.Pages.CustomerPartials._CustomerAddressPartial

<!--
Type:
_addresses: List<AddressElement>
_selectedIndex: number
-->
<div id="customerAddress" class="customerAddresses container-fluid d-flex flex-column py-2">
    <script>
        ((s)=>{
            const parent = s.parentElement;
            document.addEventListener('DOMContentLoaded', load);
            document.addEventListener('htmx:load', load);
            function load(e) {
                if(e.type==='htmx:load'){
                    e.stopPropagation();
                }
                parent._addresses = [];
                parent._selectedIndex = @(Model.Addresses.Count > 0 ? 0 : -1);
                
                const addressesContainer = parent.querySelector('.addresses');
                const addBtn = parent.querySelector('.add-address-btn');
                const dropdown = parent.querySelector('.dropdown-toggle');
                const dropdownMenu = parent.querySelector('.dropdown-menu');
                
                // Initialize existing addresses
                const existingAddresses = addressesContainer.querySelectorAll('.address-item:not(.template)');
                existingAddresses.forEach((addressElement, index) => {
                    parent._addresses.push(addressElement);
                    addressElement.addEventListener('htmx:load', () => {
                        updateDropdown();
                    });
                    // Listen for address changes
                    addressElement.addEventListener('addressChanged', () => {
                        updateDropdown();
                    });
                });
                
                // Add button functionality
                if(addBtn) {
                    addBtn.addEventListener('click', (e) => {
                        e.stopImmediatePropagation();
                        const template = cloneWithScript(addressesContainer.querySelector('.template .address-container'));
                        const newAddressItem = document.createElement('li');
                        newAddressItem.className = 'address-item card border-black border-start rounded-1';
                        newAddressItem.appendChild(template);
                        
                        addressesContainer.insertBefore(newAddressItem, addressesContainer.querySelector('.template'));
                        template.dispatchEvent(new Event('htmx:load', {bubbles: false}));
                        parent._addresses.push(newAddressItem);
                        
                        // Listen for address changes on new address
                        newAddressItem.addEventListener('addressChanged', () => {
                            updateDropdown();
                        });
                        
                        // Select the new address
                        selectAddress(parent._addresses.length - 1);
                        updateDropdown();
                    });
                }
                
                function selectAddress(index) {
                    // Hide all addresses
                    parent._addresses.forEach(addr => addr.classList.add('d-none'));
                    
                    // Show selected address
                    if(index >= 0 && index < parent._addresses.length) {
                        parent._addresses[index].classList.remove('d-none');
                        parent._selectedIndex = index;
                    }
                }
                
                function formatAddress(addressContainer) {
                    // Format according to Address.cs ToString(): {Line1}\n{Line2} {District}/{City} {Country} {ZipCode}
                    const line1 = addressContainer._line1 || '';
                    const line2 = addressContainer._line2 || '';
                    const district = addressContainer._district || '';
                    const city = addressContainer._city || '';
                    const country = addressContainer._country || '';
                    const zipCode = addressContainer._zipCode || '';
                    
                    let formatted = line1;
                    if (line2) formatted += ' ' + line2;
                    if (district || city) {
                        formatted += ' ' + district;
                        if (district && city) formatted += '/';
                        formatted += city;
                    }
                    if (country) formatted += ' ' + country;
                    if (zipCode) formatted += ' ' + zipCode;
                    
                    return formatted.trim() || 'Yeni Adres';
                }
                
                function updateDropdown() {
                    if(!dropdown || !dropdownMenu) return;
                    
                    // Clear dropdown menu
                    dropdownMenu.innerHTML = '';
                    
                    // Update dropdown text
                    if(parent._selectedIndex >= 0 && parent._selectedIndex < parent._addresses.length) {
                        const selectedAddress = parent._addresses[parent._selectedIndex];
                        const addressContainer = selectedAddress.querySelector('.address-container');
                        if(addressContainer) {
                            dropdown.innerHTML = formatAddress(addressContainer);
                        }
                    } else {
                        dropdown.innerHTML = 'Kayıtlı Adres Yok';
                    }
                    
                    // Populate dropdown menu
                    parent._addresses.forEach((addressElement, index) => {
                        const addressContainer = addressElement.querySelector('.address-container');
                        if(addressContainer) {
                            const li = document.createElement('li');
                            li.className = 'dropdown-item border-top border-bottom border-secondary-subtle border-2 px-1 py-2';
                            
                            const a = document.createElement('a');
                            a.href = 'javascript:void(0);';
                            a.className = 'text-black p-0 bg-white text-decoration-none';
                            a.innerHTML = formatAddress(addressContainer);
                            a.addEventListener('click', () => {
                                selectAddress(index);
                                updateDropdown();
                            });
                            
                            li.appendChild(a);
                            dropdownMenu.appendChild(li);
                        }
                    });
                }
                
                // Initial selection
                if(parent._selectedIndex >= 0) {
                    selectAddress(parent._selectedIndex);
                }
                updateDropdown();
            }
        })(document.currentScript)
        //# sourceURL=CustomerAddressPartial.js
    </script>
    <div class="dropdown mx-3 card card-header rounded-1 mb-3">
        <a href="javascript:void(0);" class="card-title bg-light-subtle rounded-1 border-dark-subtle border-1 card-title dropdown-toggle text-wrap text-decoration-none text-black" data-bs-toggle="dropdown" data-bs-target="#customerAddressDropdown" aria-controls="customerAddressDropdown" aria-expanded="false">Kayıtlı Adres Yok</a>
        <ul id="customerAddressDropdown" class="dropdown-menu">
        </ul>
    </div>
    <ul class="addresses list-unstyled mx-3 card-group">
        @for (int i = 0; i < Model.Addresses.Count; i++){
            <li class="address-item card border-black border-start rounded-1 @(i == 0 ? "" : "d-none")">
                @await Html.PartialAsync("Shared/" + nameof(_AddressPartial), new _AddressPartial(){ Address = Model.Addresses[i], Editable = Model.Editable, Id = "address" + i })
            </li>
        }
        <li class="template d-none">
            @await Html.PartialAsync("Shared/" + nameof(_AddressPartial), new _AddressPartial(){ Address = Address.Empty, Editable = true, AsInput = true })
        </li>
    </ul>
    <div class="mx-3 mt-3">
        <button type="button" class="add-address-btn btn btn-outline-primary">
            <i class="bi bi-plus-circle me-2"></i>Yeni Adres Ekle
        </button>
    </div>
</div>
