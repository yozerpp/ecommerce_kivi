@using System.ComponentModel
@using Ecommerce.WebImpl.Pages.Shared.SearchBar
@model Ecommerce.WebImpl.Pages.Shared.Product._CategoryPropertiesPartial
@{
    if (Model.Mode == _CategoryPropertiesPartial.DisplayMode.Create) throw new InvalidEnumArgumentException("Use other one for creation");
}
<div class="container categoryProperties @(Model.Mode == _CategoryPropertiesPartial.DisplayMode.Filter ? "h-50" : "container-fluid")">
    <h4 class="fw-bold fs-5">Ürün Özellikleri</h4>
    <script>
            ((s)=>{
                document.addEventListener("DOMContentLoaded", load);
                s.parentElement.addEventListener("htmx:load", load);
                function  load(e) {
                    if (e.type === 'htmx:load') {
                        e.stopPropagation();
                    }
                    const parent = s.parentElement;
                    parent._hasProps = @(Model.Properties.Count > 0 ? "true" : "false");
                    parent._props = new Map();
                    parent.querySelectorAll('.propertyInput').forEach(el => {
                        const i = el.lastElementChild;
                        i.addEventListener('change', _ => {
                            let val;
                            switch (el.dataset.proptype) {
                                case "slider":
                                    val = {min: i._min, max: i._max};
                                    break;
                                case "enum":
                                    val = {enumValue: i.value};
                                    break;
                                default:
                                    val = i.value;
                            }
                            parent._props.set(parseInt(el.dataset.propertyid), val);
                        });
                    })
                    @if (Model.Mode == _CategoryPropertiesPartial.DisplayMode.View){
                    foreach (var property in Model.Properties){
                    <text>
                    parent._props.set(@(property.CategoryPropertyId), '@(property.Value)');                    
                    </text>
                    }
                    }
                    console.log('loaded @(nameof(_CategoryPropertiesPartial)) with ' + e.type);
                }
            })(document.currentScript)
            //# sourceURL=CategoryPropertiesPartial.js
        </script>
    <div class="row-cols-4">
        @foreach (var property in Model.Properties){
        var metadata = property.CategoryProperty;
        <div class="@(Model.Mode == _CategoryPropertiesPartial.DisplayMode.View?"d-flex gap-5":"col g-2")">
            <label class="fs-5 fw-bold">@metadata.PropertyName: </label>
            @if (metadata.IsNumber){
                    if (Model.Mode == _CategoryPropertiesPartial.DisplayMode.View){
                        <p class="col-auto">@(property.Value)</p>
                        if (Model.Editable){
                            @await Html.PartialAsync("Shared/_EditablePartial", new _EditablePartial(){
                                OnClick = "event.currentTarget.nextElementSibling.classList.toggle('d-none');return;"
                            })
                            <div data-proptype="number" data-propertyid="@metadata.Id" class="col-auto propertyInput d-none">
                                <input type="number" min="@(metadata.MinValue??-100000)" max="@(metadata.MaxValue??1000000)"/>
                            </div>
                        }
                        
                    }
                    else{
                        <div data-proptype="slider" data-propertyid="@metadata.Id" class="col-auto propertyInput @(Model.Mode == _CategoryPropertiesPartial.DisplayMode.View?"d-none":"")">
                            <script>
                        ((s)=>{
                            const parent=  s.parentElement.parentElement.parentElement.parentElement;
                            function  load(e){
                                s.nextElementSibling.addEventListener('change',(e)=>{
                                    parent._props.set(@(metadata.Id),{min: s.nextElementSibling._min, max: s.nextElementSibling._max});
                                });
                                s.nextElementSibling.dispatchEvent(new Event('htmx:load', {bubbles:false}));
                            }
                            document.addEventListener('DOMContentLoaded',load);
                            parent.addEventListener('htmx:load',load);
                        })(document.currentScript)
                    </script>
                            @await Html.PartialAsync("Shared/SearchBar/_SliderPartial", new _SliderPartial(){
                                MaxValue = metadata.MaxValue ?? 100000000m, MinValue = metadata.MinValue ?? 0m
                            })    
                        </div>    
                    }
                }else if (metadata.EnumValues != null){
                    if (Model.Mode == _CategoryPropertiesPartial.DisplayMode.View){
                        <p class="col-auto fs-5">@(property.Value)</p>     
                        if(Model.Editable){ 
                            @await Html.PartialAsync("Shared/_EditablePartial", new _EditablePartial(){ 
                                Target = "next" ,
                                OnClick = "event.currentTarget.nextElementSibling.classList.toggle('d-none');return;"

                            })
                        }
                    }   
                    <div data-proptype="enum" data-propertyid="@(metadata.Id)" class="col-auto propertyInput @(Model.Mode == _CategoryPropertiesPartial.DisplayMode.View ? "d-none" : "")">
                        <select>
                            <option selected>Seçiniz</option>
                            @{ 
                                var vals = metadata.EnumValues.Split('|');
                               if (Model.Mode == _CategoryPropertiesPartial.DisplayMode.Filter)
                                   vals = vals.Skip(1).Take(vals.Length - 2).ToArray();
                               var i = 0;
                            }
                            @foreach (var val in vals){
                                <option value="@val">@val</option>
                            }
                        </select>
                    </div>
                }else{
                    if (Model.Mode == _CategoryPropertiesPartial.DisplayMode.View){
                        <p class="col-auto fs-5">@property.Value</p>
                        if (Model.Editable){
                            @await Html.PartialAsync("Shared/_EditablePartial", new _EditablePartial(){
                                Target = "next",
                                OnClick = "event.currentTarget.nextElementSibling.classList.toggle('d-none');return;"
                            })
                        }
                    }
                    <div data-proptype="text" data-propertyid="@metadata.Id" class="propertyInput col-auto @(Model.Mode == _CategoryPropertiesPartial.DisplayMode.View?"d-none":"")">
                        <input id="@(Model.InputNamePrefix)-@(metadata.PropertyName)" 
                               name="@(Model.InputNamePrefix)[@metadata.PropertyName]" 
                               type="@(metadata.IsNumber ? $"number" : $"text")"/>
                    </div>
                }
            </div>
        }
    </div>
</div>
