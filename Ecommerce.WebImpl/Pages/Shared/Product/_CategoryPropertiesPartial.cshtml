@using Ecommerce.WebImpl.Pages.Shared.SearchBar
@using Product = Ecommerce.WebImpl.Pages.Product
@model Ecommerce.WebImpl.Pages.Shared.Product._CategoryPropertiesPartial

<div class="container @(Model.InputNamePrefix != null ? "h-50" : "container-fluid")">
    <h4 class="fw-bold fs-5">Ürün Özellikleri</h4>
    @if (Model.InputNamePrefix != null){ // if input
        <script>
            ((s)=>{
                const parent = s.parentElement;
                function  f(){
                    parent._hasProps = @(Model.Properties.Count > 0 ? "true" : "false");
                    parent._props =new Map();    
                }
                document.addEventListener("DOMContentLoaded", f);
                parent.addEventListener("init", f);
            })(document.currentScript)
        </script>
        foreach (var prop in Model.Properties){
            <div class="gap-5 g-5">
                <label class="fs-5">@prop.PropertyName</label>
                @if (prop.IsNumber){
                    <script>
                        ((s)=>{
                            const parent=  s.parentElement.parentElement;
                            function  f(){
                                s.nextElementSibling.addEventListener('change',(e)=>{
                                    console.log(this);
                                    parent._props.set(@(prop.Id),{min: s.nextElementSibling._min, max: s.nextElementSibling._max});
                                });
                                s.nextElementSibling.dispatchEvent(new Event('init', {bubbles:false}));
                            }
                            document.addEventListener('DOMContentLoaded',f);
                            parent.addEventListener('init',f);
                        })(document.currentScript)
                    </script>
                    @await Html.PartialAsync("Shared/SearchBar/_SliderPartial", new _SliderPartial(){
                        MaxValue = prop.MaxValue ?? 100000000m, MinValue = prop.MinValue ?? 0m
                    })
                }
                else if (prop.EnumValues != null){
                    <select onchange="const p = event.currentTarget.parentElement.parentElement;p._props.set(@(prop.Id),{enumValue:event.currentTarget.value})" class="col-auto" id="@(Model.InputNamePrefix)-@(prop.PropertyName)Value" name="@(Model.InputNamePrefix)[@(prop.PropertyName)]">
                        <option selected>Seçiniz</option>
                        @{ var vals = prop.EnumValues.Split(';');}
                        @foreach (var val in vals.Skip(1).Take(vals.Length -1)){
                            <option value="@val">@val</option>
                        }
                    </select>
                }
                else{
                    <input onchange="event.currentTarget.parentElement.parentElement._props.set(@(prop.PropertyName),event.currentTarget.value);" class="col-auto" id="@(Model.InputNamePrefix)-@(prop.PropertyName)" name="@(Model.InputNamePrefix)[@prop.PropertyName]" type="@(prop.IsNumber ? $"number" : $"text")"/>
                }
            </div>
        }
    }
    else{
        foreach (var property in Model.Properties){
            <div class="row">
                <b class="col-auto">@property.PropertyName: </b>
                <p id="@(property.PropertyName)Val" class="col-auto">@property.PropertyName</p>
                @if (Model.IsEditable){
                    <a href="javascript:void(0);" onclick="this.previousElementSibling.setAttribute('contenteditable','true');" class="col-auto text-decoration-none bg-white text-secondary"><i class="bi bi-pencil"></i></a>
                }
            </div>
        }
    }
</div>