@using System.ComponentModel
@using Ecommerce.WebImpl.Pages.Shared.SearchBar
@model Ecommerce.WebImpl.Pages.Shared.Product._CategoryPropertiesPartial
@{
    if (Model.Mode == _CategoryPropertiesPartial.DisplayMode.Create) throw new InvalidEnumArgumentException("Use other one for creation");
}
<div class="container partial-parent categoryProperties @(Model.Mode == _CategoryPropertiesPartial.DisplayMode.Filter ? "h-50 p-4 bg-light rounded shadow-sm border" : "container-fluid")">
    <h4 class="fw-bold fs-5 @(Model.Mode == _CategoryPropertiesPartial.DisplayMode.Filter ? "mb-4 text-primary border-bottom pb-2" : "")">Ürün Özellikleri</h4>
    <script>
            ((s)=>{
                document.addEventListener("DOMContentLoaded", load);
                s.parentElement.addEventListener("htmx:load", load);
                function  load(e) {
                    if (e.type === 'htmx:load') {
                        e.stopPropagation();
                    }
                    const parent = s.parentElement;
                    parent._hasProps = @(Model.Properties.Count > 0 ? "true" : "false");
                    parent._props = new Map();
                    parent.querySelectorAll('.propertyInput').forEach(el => {
                        const i = el.lastElementChild;
                        i.addEventListener('change', _ => {
                            let val;
                            @if(Model.Mode==_CategoryPropertiesPartial.DisplayMode.Create){
                            <text>
                            switch (el.dataset.proptype) {
                                case "slider":
                                    val = {min: i._min, max: i._max};
                                    break;
                                case "enum":
                                    val = {enumValue: i.value};
                                    break;
                                default:
                                    val = i.value;
                            }
                            </text>
                            } else {<text>val=i.value;</text>}
                            parent._props.set(parseInt(el.dataset.propertyid), val);
                        });
                    })
                    @if (Model.Mode == _CategoryPropertiesPartial.DisplayMode.View){
                    foreach (var property in Model.Properties){
                    <text>
                    parent._props.set(@(property.CategoryPropertyId), '@(property.Value)');                    
                    </text>
                    }
                    }
                    parent.querySelectorAll('input').forEach(i=>{
                        i.addEventListener('change', e=>{
                            if(!i.reportValidity()){
                                e.preventDefault();
                                e.stopImmediatePropagation();
                                i.classList.add('is-invalid');
                                i.value = i._oldValue ??null;
                            }
                            else {
                                i._oldValue=i.value;
                                i.classList.remove('is-invalid');
                            }
                        })
                    })
                    console.log('loaded @(nameof(_CategoryPropertiesPartial)) from ' + e.type);
                }
            })(document.currentScript)
            //# sourceURL=CategoryPropertiesPartial.js
        </script>
    <div class="@(Model.Mode == _CategoryPropertiesPartial.DisplayMode.Filter ? "row g-3" : "row-cols-4")">
        @if (Model.Properties.Count == 0){
            <div class="alert alert-light">
                <h3 class="fs-6 mt-1 fw-bold">@(Model.Mode==_CategoryPropertiesPartial.DisplayMode.Filter?"Bu kategoriye ait özellik bulunmamaktadır.":"Bu ürünün kategorisi için özellik belirtilmemiş.")</h3>
            </div>
        }
        @foreach (var property in Model.Properties){
            var metadata = property.CategoryProperty;
            <div class="@(Model.Mode == _CategoryPropertiesPartial.DisplayMode.View ? "d-flex justify-content-between align-items-center py-2 px-3 mb-2 bg-light rounded border" : "col-md-6 col-lg-4")">
                <label class="@(Model.Mode == _CategoryPropertiesPartial.DisplayMode.View ? "fs-6 fw-semibold text-muted mb-0" : "form-label fw-semibold text-dark mb-2")">@metadata.PropertyName: </label>
                @if (metadata.IsNumber){
                    if (Model.Mode == _CategoryPropertiesPartial.DisplayMode.View){
                        <div class="d-flex align-items-center gap-2">
                            <span class="badge bg-primary fs-6">@(property.Value)</span>
                            @if (Model.Editable){
                                @await Html.PartialAsync("Shared/_EditablePartial", new _EditablePartial(){
                                    Target = "next"
                                })
                                <div data-proptype="number" data-propertyid="@metadata.Id" class="col-auto propertyInput d-none">
                                    <input type="number" min="@(metadata.MinValue ?? -100000)" max="@(metadata.MaxValue ?? 1000000)"/>
                                </div>
                            }
                        </div>
                    }
                    else{
                        <div data-proptype="slider" data-propertyid="@metadata.Id" class="@(Model.Mode == _CategoryPropertiesPartial.DisplayMode.View ? "col-auto propertyInput d-none" : "propertyInput bg-white p-3 rounded border shadow-sm")">
                            <script>
                        ((s)=>{
                            const parent=  s.closest('.partial-parent');
                            function  load(e){
                                if(e.type === 'htmx:load'){
                                    e.stopPropagation();
                                    s.nextElementSibling.dispatchEvent(new Event('htmx:load', {bubbles:false}));
                                }
                                s.nextElementSibling.addEventListener('change',(e)=>{
                                    parent._props.set(@(metadata.Id),{min: s.nextElementSibling._min, max: s.nextElementSibling._max});
                                });
                            }
                            document.addEventListener('DOMContentLoaded',load);
                            parent.addEventListener('htmx:load',load);
                        })(document.currentScript)
                    </script>
                            @await Html.PartialAsync("Shared/SearchBar/_SliderPartial", new _SliderPartial(){
                                MaxValue = metadata.MaxValue ?? 100000000m, MinValue = metadata.MinValue ?? 0m
                            })
                        </div>
                    }
                }
                else if (metadata.EnumValues != null){
                    if (Model.Mode == _CategoryPropertiesPartial.DisplayMode.View){
                        <div class="d-flex align-items-center gap-2">
                            <span class="badge bg-success fs-6">@(property.Value)</span>
                            @if (Model.Editable){
                                @await Html.PartialAsync("Shared/_EditablePartial", new _EditablePartial(){
                                    Target = "next",

                                })
                                <div data-proptype="enum" data-propertyid="@(metadata.Id)" class="@(Model.Mode == _CategoryPropertiesPartial.DisplayMode.View ? "col-auto propertyInput d-none" : "propertyInput bg-white p-3 rounded border shadow-sm")">
                                    <select style="min-width: 0;" class="@(Model.Mode == _CategoryPropertiesPartial.DisplayMode.Filter ? "form-select border-primary" : "form-select-sm")">
                                        <option selected>Seçiniz</option>
                                        @{
                                            var vals = metadata.EnumValues.Split('|');
                                            if (Model.Mode == _CategoryPropertiesPartial.DisplayMode.Filter)
                                                vals = vals.Skip(1).Take(vals.Length - 2).ToArray();
                                            var i = 0;
                                        }
                                        @foreach (var val in vals){
                                            <option value="@val">@val</option>
                                        }
                                    </select>
                                </div>
                            }
                        </div>
                    }
                }
                else{
                    <div class="d-flex align-items-center gap-2">
                        @if (Model.Mode == _CategoryPropertiesPartial.DisplayMode.View){
                            <span class="badge bg-info text-dark fs-6">@property.Value</span>
                            if (Model.Editable){
                                @await Html.PartialAsync("Shared/_EditablePartial", new _EditablePartial(){
                                    Target = "next",
                                })
                            }
                        }
                        <div data-proptype="text" data-propertyid="@metadata.Id" class="@(Model.Mode == _CategoryPropertiesPartial.DisplayMode.View ? "propertyInput col-auto d-none" : "propertyInput bg-white p-3 rounded border shadow-sm")">
                            <input class="@(Model.Mode == _CategoryPropertiesPartial.DisplayMode.Filter ? "form-control border-primary" : "form-control-sm")" style="min-width: 0;width: 100%;" id="@(Model.InputNamePrefix)-@(metadata.PropertyName)"
                                   name="@(Model.InputNamePrefix)[@metadata.PropertyName]"
                                   type="@(metadata.IsNumber ? $"number" : $"text")"/>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>
