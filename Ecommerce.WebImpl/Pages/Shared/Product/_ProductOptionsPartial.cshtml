@model Ecommerce.WebImpl.Pages.Shared.Product._ProductOptionsPartial
@{
    var optionsGrouped = Model.Options.GroupBy(o => 
        o.CategoryPropertyId != null 
        ? o.CategoryPropertyId.Value.ToString() 
        : o.Key ?? "").ToArray();
}
<!--Type:
_options:Map<int,string>
-->
<div class="container-fluid partial-parent">
    <script>
        ((s)=>{
            document.addEventListener('DOMContentLoaded', load);
            const parent =s.parentElement;
            parent.addEventListener('htmx:load', load);
            function load(e){
                if(e.type ==='htmx:load') e.stopPropagation();
                parent._options = new Map();
                s.nextElementSibling.querySelectorAll('.tab-pane').forEach(el=>{
                    const opt = e.firstElementChild;
                    opt.dispatchEvent(new Event('htmx:load', {bubbles:false, cancelable:true}));
                    const key = opt.dataset.propertyid!=undefined?parseInt(opt.dataset.propertyid):opt.dataset.keyname;
                    opt.addEventListener('change', e=>{
                        e.stopPropagation();
                        parent._options.set(key, opt.dataset.selected);
                    })
                    parent._options.set(key,opt.dataset.selected);
                });
            }
        })(document.currentScript)
        //# sourceURL=/ProductOptions/@(nameof(_ProductOptionsPartial)).js
        </script>
    <div class="tab-content border-0" style="background-color: inherit">
        @foreach (var options in optionsGrouped){
            var propertyId = uint.Parse(options.Key);
            var propName = propertyId == 0 ? null : options.Key;
            <div id="option@(options.Key.GetHashCode())" role="tabpanel" aria-labelledby="option@(options.GetHashCode())-tab" 
                 class="tab-pane border-0 px-2 py-4" style="background-color: inherit">
                @await Html.PartialAsync("Shared/Product/_ProductOptionPartial", new _ProductOptionPartial{PropertyId = propertyId==0?null:propertyId, CustomKey = propName, Options = options.ToArray(), Editable = Model.Editable })
            </div>
        }
    </div>
    <div role="tablist" class="w-100 d-flex py-1 mt-2 ps-2 justify-content-start align-content-center align-items-center">
        @foreach(var opt in optionsGrouped){
            <button id="option@(opt.Key.GetHashCode())-tab" data-bs-toggle="tab" type="button" role="tab" data-bs-target="#option@(opt.GetHashCode())" aria-controls="option@(opt.GetHashCode())" aria-selected="false"
                class="btn btn-light border-1 border-opacity-50 border-secondary-subtle rounded-2">
                <p class="text-center fs-4 text-muted">
                    @(opt.First().Property.CategoryProperty.PropertyName)
                </p>
            </button>
        }
        @if (Model.Editable){
            <button type="button" class="btn btn-success border-1 border-opacity-50 border-success-subtle rounded-2" 
                    onclick="addOption()">
                <span class="text-center fs-6 text-success">+ Add Option</span>
            </button>
        }
    </div>
    @if (Model.Editable){
        <div class="container-fluid justify-content-end align-content-center d-flex mt-3">
            <button type="button" class="btn btn-danger me-2" onclick="deleteSelectedOption()">
                Delete Selected Option
            </button>
        </div>
        
        <script>
            function addOption() {
                // For now, we'll add a simple option - this could be enhanced with a modal for user input
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/Product?handler=addOption&OptionId=0';
                
                // Create ProductOption properties for model binding
                const productIdInput = document.createElement('input');
                productIdInput.type = 'hidden';
                productIdInput.name = 'ProductOption.ProductId';
                productIdInput.value = '@(Model.Options.FirstOrDefault()?.ProductId ?? 0)';
                form.appendChild(productIdInput);
                
                const sellerIdInput = document.createElement('input');
                sellerIdInput.type = 'hidden';
                sellerIdInput.name = 'ProductOption.SellerId';
                sellerIdInput.value = '@(Model.Options.FirstOrDefault()?.SellerId ?? 0)';
                form.appendChild(sellerIdInput);
                
                const valueInput = document.createElement('input');
                valueInput.type = 'hidden';
                valueInput.name = 'ProductOption.Value';
                valueInput.value = 'New Option';
                form.appendChild(valueInput);
                
                // Add CSRF token if available
                const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]');
                if (csrfToken) {
                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = csrfToken.value;
                    form.appendChild(tokenInput);
                }
                
                document.body.appendChild(form);
                form.submit();
            }
            
            function deleteSelectedOption() {
                const parent = document.querySelector('.partial-parent');
                let selectedOptionId = null;
                
                // Get the currently selected option ID from the active tab
                const activeTab = document.querySelector('.tab-pane:not(.d-none)');
                if (activeTab) {
                    const selectedElement = activeTab.querySelector('[data-selected]');
                    if (selectedElement && selectedElement.dataset.optionid) {
                        selectedOptionId = selectedElement.dataset.optionid;
                    }
                }
                
                if (!selectedOptionId) {
                    alert('Please select an option to delete.');
                    return;
                }
                
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = `/Product?handler=deleteOption&OptionId=${selectedOptionId}`;
                
                // Add CSRF token if available
                const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]');
                if (csrfToken) {
                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = csrfToken.value;
                    form.appendChild(tokenInput);
                }
                
                document.body.appendChild(form);
                form.submit();
            }
        </script>
    }
</div>
