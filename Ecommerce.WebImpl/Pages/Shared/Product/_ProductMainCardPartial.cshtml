@using Customer = Ecommerce.WebImpl.Pages.Customer
@using Product = Ecommerce.WebImpl.Pages.Product
@model (ProductWithAggregatesCustomerView, IDictionary<uint, Ecommerce.Entity.Category>)
@{
    var isBuyer = ViewContext.ViewData[nameof(Entity.User)] is Customer or null;
}
<div class="product-main-card card m-1  h-100 rounded-2 shadow-sm hover-grow-small hover-shadow justify-content-between">
    <style>
        .product-main-card {
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
            border: 1px solid #e5e7eb;
            background: linear-gradient(135deg, #ffffff 0%, #f8fafc 100%);
        }
        
        .product-main-card:hover {
            transform: translateY(-4px);
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
            border-color: #3b82f6;
        }
        
        .product-main-card:hover .add-to-cart-btn {
            opacity: 1;
            transform: translateY(0);
            pointer-events: auto;
        }
        
        .product-image {
            transition: transform 0.4s cubic-bezier(0.4, 0, 0.2, 1);
            object-fit: cover;
            border-radius: 8px 8px 0 0;
        }
        
        .product-main-card:hover .product-image {
            transform: scale(1.08);
        }
        
        .card-content {
            position: relative;
            z-index: 1;
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
        }
        
        .product-main-card .card-title h5 {
            color: #1f2937;
            font-weight: 600;
            line-height: 1.3;
            transition: color 0.3s ease;
        }
        
        .product-main-card:hover .card-title h5 {
            color: #3b82f6;
        }
        
        .product-main-card .card-body {
            padding: 1.25rem;
            background: linear-gradient(to bottom, rgba(255,255,255,0.9), rgba(248,250,252,0.9));
        }
        
        .product-main-card .card-footer {
            background: linear-gradient(to top, #ffffff, rgba(248,250,252,0.8)) !important;
            border-top: 1px solid #f1f5f9;
            padding: 1rem 1.25rem;
        }
        
        .product-main-card .text-primary {
            color: #059669 !important;
            font-weight: 700;
        }
        
        .product-main-card .text-muted {
            color: #6b7280 !important;
        }
        
        .product-main-card .small {
            font-size: 0.875rem;
            color: #9ca3af;
        }
        
        .line-clamp-2 {
            display: -webkit-box;
            -webkit-line-clamp: 2;
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
            line-height: 1.4;
        }
        
        .product-main-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #3b82f6, #8b5cf6, #06b6d4);
            opacity: 0;
            transition: opacity 0.3s ease;
        }
        
        .product-main-card:hover::before {
            opacity: 1;
        }
    </style>
    <script>((s)=>{
        const parent = s.parentElement;
        document.addEventListener('DOMContentLoaded', load);
        parent.addEventListener('htmx:load', load);
        function  load(e){
            if(e.type === 'htmx:load') e.stopPropagation();
            @if (isBuyer){
            <text>
                parent.querySelector('.add-to-cart-btn').dispatchEvent(new Event('htmx:load', {cancelable: true, bubbles:false}));             
           </text>
            }
        }
        })(document.currentScript)</script>
    <div onclick="window.location='/@nameof(Product)?ProductId=@Model.Item1.Product.Id'" class="text-decoration-none text-dark card-content">
        <div class="d-flex flex-column align-items-start align-content-start">
            <div class="mb-1 overflow-hidden rounded-top">
                <img src="@Utils.GetImageUrlOrDefault(Model.Item1.Product.MainImage?.Data)" style="aspect-ratio: 3/2; min-height: 200px;" class="card-img-top product-image" alt="Resim mevcut değil.">
            </div>
            <div class="card-body gap-2 flex-column d-flex justify-content-center container-fluid pt-2">
                <div class="flex-column container-fluid d-flex justify-content-center mb-0 p-0 align-content-center align-items-center">
                    <partial name="Shared/Product/_CategoryHierarchyPartial" model="(Model.Item1.Product.CategoryId, Model.Item2)"/>
                    <div class="card-title d-flex justify-content-center mt-2 p-0">
                        <h5 class="fs-4 fw-semibold text-center">@Model.Item1.Product.Name</h5>
                    </div>
                </div>
                <div class="flex-column d-flex mx-0 mt-2 p-0">
                    <div class="small mb-2">
                        @await Html.PartialAsync($"Shared/{nameof(_ReviewStarPartial)}", new _ReviewStarPartial(){ Rating = Model.Item1.Product.Stats.RatingAverage , RatingCount = (int)(Model.Item1.Product.Stats.ReviewCount) })
                    </div>
                    <div class="d-flex container-fluid justify-content-between align-items-center">
                        <p class="fw-bold my-0 text-muted" style="font-size: x-small">@(Model.Item1.Product.Stats.SaleCount) Kere Satıldı</p>
                        <div class="d-flex align-items-center justify-content-center gap-2">
                            @await Html.PartialAsync("Shared/Product/_FavoritePartial", (false, Model.Item1))
                        </div>
                    </div>
                </div>
                @if (Model.Item1.Product.Description != null!){
                    <div class="container-fluid text-center m-0 p-0 overflow-hidden">
                        <p class="m-0 p-0 text-muted small line-clamp-2">
                            @Model.Item1.Product.Description
                        </p>
                    </div>
                }
            </div>
        </div>
    </div>
    <div class="card-footer bg-white border-0 pt-0">
        <div class="card-text mx-2 mb-3 d-flex align-items-center">
            @if (Model.Item1.Product.Stats.MinPrice != null){
                <div class="d-flex flex-column w-100">
                    <p class="text-muted small mb-1">Fiyat Aralığı:</p>
                    <p class="fs-5 fw-bold text-primary mb-0">@(decimal.Round(Model.Item1.Product.Stats.MinPrice, 2).ToString("C")) - @(decimal.Round(Model.Item1.Product.Stats.MaxPrice!, 2).ToString("C"))</p>
                </div>
            }
            else{
                <div class="d-flex flex-column w-100">
                    <p class="text-muted mb-0">Teklif Yok</p>
                </div>
            }
        </div>
        @if(isBuyer){
            <div class="position-relative">
                @await Html.PartialAsync("Shared/Product/_AddToCartButtonPartial", new _AddToCartButtonPartial(){
                    ProductId = Model.Item1.Product.Id
                })
            </div>
        }
    </div>

</div>
