@model Ecommerce.WebImpl.Pages.Shared.Product._ProductMainPartial
@using System.Globalization
@using System.Text.Json
@using Ecommerce.Entity
@using Ecommerce.Entity.Common
@using Ecommerce.Entity.Views
@using Ecommerce.WebImpl.Pages.Shared.Review
@using Cart = Ecommerce.WebImpl.Pages.Cart
@using Product = Pages.Product
@{
    var editable = Model.Editable || Model.Creating;
}
<div class="container-fluid partial-parent">
    <script>
        ((s)=>{
            const parent = s.parentElement;
            document.addEventListener('DOMContentLoaded', load);
            parent.addEventListener('htmx:load', load);
            parent.assignInputs = assignInputs;
            function assignInputs() {
                document.getElementById('nameInput').value = document.getElementById('nameValue').innerHTML;
                document.getElementById('descInput').value = document.getElementById('descriptionValue').innerHTML;
                if(!document.getElementById('propertyInputs')){
                    const propdiv = document.createElement('div');
                    propdiv .id = 'propertyInputs';
                    document.getElementById('editForm').appendChild(propdiv);
                } else document.getElementById('propertyInputs').innerHTML = '';
                document.getElementById('properties').lastElementChild._props.entries().forEach((e,i)=>{
                    const [k,v] = e;
                    const pfx = '@(nameof(Product.EditedOffer)).@(nameof(ProductOffer.Product)).@(nameof(Entity.Product.CategoryProperties))[' + i + '].';
                    const valueInp =createInput(pfx + '@nameof(ProductCategoryProperty.Value)',v);
                    const idInp = createInput(pfx + '@nameof(ProductCategoryProperty.CategoryPropertyId)', k);
                    const f = document.getElementById('editForm');
                    f.appendChild(idInp);
                    f.appendChild(valueInp);
                })
                const slide = document.getElementById('carousels').firstElementChild;
                function getImagePrefix(i){
                    return '@(nameof(Product.EditedOffer)).@(nameof(ProductOffer.Product)).@(nameof(Entity.Product.Images))['+ i + ']';
                }
                let _i=0;
                const _f = document.getElementById('editForm');
                const _opts =document.getElementById('offerOptions').firstElementChild;
                if(_opts?._newOptions) {
                    for (let [k, v] of _opts._newOptions) {
                        const pfx = '@(nameof(Product.EditedOffer)).@(nameof(ProductOffer.Options))[' + _i++ + '].';
                        const idInput = createInput(
                            pfx + (isNaN(parseInt(k)) ? '@(nameof(ProductOption.Key))' : '@(nameof(ProductOption.CategoryPropertyId))'),
                            k, "hidden");
                        const valueInput = createInput(pfx + '@(nameof(ProductOption.Value))', v, "hidden");
                        _f.insertBefore(valueInput, null);
                        _f.insertBefore(idInput, valueInput);
                    }
                }
                if(_opts?._allOptions){
                for (let oid of _opts._allOptions){
                    const pfx = '@(nameof(Product.EditedOffer)).@(nameof(ProductOffer.Options))[' + _i++ + '].';
                    const inp = createInput(pfx + '@(nameof(ProductOption.Id))', oid, "hidden");
                    _f.insertBefore(inp, null);
                }
                }

                if(slide._edited) {
                    parent._edited = true;
                    slide._editedImages.entries().forEach((i, idx) => {
                        const [k, v] = i;
                        const pfx = getImagePrefix(idx);
                        const dataInp = document.createElement('input');
                        dataInp.type = 'hidden';
                        dataInp.name = pfx + '.@(nameof(ImageProduct.Image)).@(nameof(Image.Data))';
                        const idInp = document.createElement('input');
                        idInp.type = 'hidden';
                        idInp.name = pfx + '.@(nameof(ImageProduct.ImageId))';
                        idInp.value = k;
                        const primaryInp = document.createElement('input');
                        primaryInp.type = 'hidden';
                        primaryInp.name = pfx + '.@(nameof(ImageProduct.IsPrimary))';
                        if (v == null) dataInp.value = '-';
                        else {
                            primaryInp.value = v.primary;
                            if (v.data != null) dataInp.value = v.data;
                        }
                        const f = document.getElementById('editForm');
                        f.insertBefore(dataInp, f.lastElementChild);
                        f.insertBefore(idInp, f.lastElementChild);
                        f.insertBefore(primaryInp,f.lastElementChild);
                    })
                }
                document.getElementById('sentImagesInput').value = slide._addedImages.length > 0 ? slide._addedImages.join(';;') : null;
                document.getElementById('editedInput').value = parent._productEdited.toString();
                document.getElementById('offerEditedInput').value = parent._offerEdited.toString();
                document.getElementById('priceInput').value = document.getElementById('priceValue').value.replaceAll('.',',');
                document.getElementById('stockInput').value = document.getElementById('stockValue').value;
                document.getElementById('discountInput').value = document.getElementById('discountValue').value.replaceAll('.', ',');
                const dims = document.getElementById('properties').firstElementChild;
                document.getElementById('weightInput').value = dims.dataset.weight;
                document.getElementById('depthInput').value = dims.dataset.depth;
                document.getElementById('heightInput').value = dims.dataset.height;
                document.getElementById('widthInput').value = dims.dataset.width;
            }
            function load (e) {
                if(e.type==='htmx:load')
                    e.stopPropagation();
                parent._offerEdited = false;
                parent._productEdited = false;

                @if (editable){
                <text>
                    const saveButton = s.nextElementSibling.firstElementChild.firstElementChild.querySelector('button.save-button');
                    saveButton.addEventListener('click', e=>{
                        assignInputs();
                        htmx.trigger(document.getElementById('editForm'), 'submit', {bubbles:true, cancelable:true});
                    })
                    document.addEventListener('editControl', e=>{
                        document.getElementById('carousels').lastElementChild.classList.toggle('edit-control');
                    })
                    parent.addEventListener('edit', e=>{
                        e.stopPropagation();parent._productEdited=true;
                    })
                    parent.addEventListener('editOffer', e=>{
                        e.stopPropagation(); parent._offerEdited = true;
                    })
                document.getElementById('properties').firstElementChild.addEventListener('change',_=>{
                    parent._productEdited=true;
                })
                </text>
                }
                if(e.type === 'htmx:load'){
                    document.getElementById('carousels').firstElementChild.dispatchEvent(new Event('htmx:load', {bubbles:false}));
                    document.getElementById('properties').firstElementChild.dispatchEvent(new Event('htmx:load', {bubbles:false}));
                    document.getElementById('properties').lastElementChild.dispatchEvent(new Event('htmx:load', {bubbles:false}));
                    document.getElementById('offerOptions').firstElementChild.dispatchEvent(new Event('htmx:load', {bubbles:false}));
                }
                @if (!Model.Creating && Model.ViewingSellerId == null){
                    <text>
                document.getElementById('addToCartForm').addEventListener('submit', e=>{
                    e.preventDefault();
                    const offerListErrorToolTip = new bootstrap.Tooltip(document.getElementById('offerList'), {toggle:false, trigger:'manual',customClass:'bg-danger', title:'Lütfen ürünü satın almak istediğiniz satıcıyı seçiniz.',});
                    
                    if(!document.getElementById('sellerIdInput').value) {
                        e.stopImmediatePropagation();
                        offerListErrorToolTip.show();
                        setTimeout(()=>offerListErrorToolTip.hide(), 3000);
                    }
                    let body ={};
                    const incr = e.currentTarget.querySelector('input[name="incr"]');
                    const q = e.currentTarget.querySelector('input[name="quantity"]');
                    if(incr.value) {
                        let v= parseInt(q.value);
                        const i = parseInt(incr.value);
                        if(v===0) return;
                        v=isNaN(v)?0:v;
                        q.value = (v + (body.quantity = i)).toString();
                        incr.value = null;
                    }
                    else body.quantity =q.value;
                    body.__RequestVerificationToken = document.getElementById('addToCartForm').querySelector('input[name="__RequestVerificationToken"]').value;
                    body.productId= @Model.ViewedProduct.Id;
                    body.sellerId = document.getElementById('sellerIdInput').value;

                    const options = document.getElementById('offerOptions').firstElementChild;
                    let i=0;
                    for(const [k,v] of options._options.entries()){
                        const prefix = '@(nameof(Cart.Options))[' +i++ + '].';
                        const keyInputName = isNaN(parseInt(k))?prefix + '@(nameof(ProductOption.Key))':(prefix + '@(nameof(ProductOption.CategoryPropertyId))')
                        body[keyInputName] = k;
                        body[prefix + '@(nameof(ProductOption.Id))']= parseInt(v);
                        body[prefix + '@(nameof(ProductOption.ProductId))'] = @Model.ViewedProduct.Id;
                    }
                    htmx.ajax('POST', '/@nameof(Cart)', {
                        target:'#addToCartResult',
                        swap:'innerHTML',
                        source:e.currentTarget,
                        values: body,
                        headers:{'Content-Type': 'application/x-www-form-urlencoded'},
                        handler: function (elt,e){
                            if(e.xhr.status>=300 || e.xhr.status < 200) return;
                            const q = parseInt(elt.querySelector('input[name="quantity"]').value);
                            if(q >0)
                                elt.querySelectorAll('button.existing-item').forEach(b=>b.classList.remove('d-none'));
                            else elt.querySelectorAll('button.existing-item').forEach(b=>b.classList.add('d-none'));
                            document.dispatchEvent(new CartChangedEvent(q, parseInt(elt.querySelector('#sellerIdInput').value), @Model.ViewedProduct.Id));
                        }
                    })

                })
                </text>
                }
                @if (Model.Creating){
                    <text>
                    document.dispatchEvent(new Event('editControl', {bubbles:false, cancelable:false}));
                    </text>
                }
                console.log("loaded @(nameof(_ProductMainPartial)) from " + e.type)
            }
        })(document.currentScript)
        //# sourceURL=ProductMainPartial.js
    </script>
    <ul class="list-unstyled">
        @if (editable){
            <li class="d-flex my-2 container-fluid justify-content-center">
                <div class="row g-3">
                    @if (!Model.Creating){
                        <button data-titles="Düzenle,İptal" data-colors="bg-danger,bg-primary" data-idx="1" onclick="const b = event.currentTarget;b.nextElementSibling.classList.toggle('d-none');b.innerHTML = b.dataset.titles.split(',').at(parseInt(b.dataset.idx));b.dataset.idx = ((parseInt(b.dataset.idx) + 1) %2).toString();document.dispatchEvent(new Event('editControl', {cancelable:false, bubbles:false}))" class="btn btn-primary col-auto">Düzenle</button>
                    }
                    <button type="button" class="ms-2 btn save-button btn-success @(!Model.Creating?"d-none":"") col-auto" style="@(Model.Creating?"background-color: darkorange":"")">@(!Model.Creating?"Düzenlemeyi Kaydet":"İlan Ver")</button>
                    @if (editable && Model.StaffVisiting){
                        <form hx-post="/Product?handler=delete"  hx-swap="innerHTML" hx-target="#popupResult" class="col-auto">
                            <input type="hidden" name="@nameof(Product.ProductId)" value="@Model.ViewedProduct.Id"/>
                            <button class="btn btn-danger"
                                    hx-trigger="click">Sil</button>
                        </form>
                    }
                </div>
            </li>
        }
        <li class="row section my-3 align-content-center align-items-stretch">
            <div class="col-7 d-flex flex-column pe-1"  >
                <div id="carousels" class="my-1">
                    @await Html.PartialAsync("Shared/Product/_CarouselPartial", new _CarouselPartial(){
                        Editable = editable ,Creating = Model.Creating,
                        Images = Model.ViewedProduct.Images.OrderBy(i=>i.IsPrimary?-1:0).ToArray(),
                        FetchUrl = "/" + nameof(Product) + $"?handler=images&{nameof(Product.ProductId)}={Model.ViewedProduct.Id}&json=true"
                    })
                    @if (editable){
                    <div class="container-fluid d-flex edit-control justify-content-center card-group gap-2">
                        <div class="input-group">
                            <label class="input-group-text">Stok</label>
                            <input data-dispatched="false" onchange="if(event.currentTarget.dataset.dispatched ==='false'){event.currentTarget.dataset.dispatched='true';event.currentTarget.dispatchEvent(new Event('editOffer',{cancelable:true,bubbles:true}));}" class="form-control rounded-2 small" placeholder="Stok" min="0" id="stockValue" type="number" name="@(nameof(Product.EditedOffer.Stock))" value="@(Model.SellerOffer?.Stock)"/>
                        </div>
                        <div class="input-group">
                            <label class="input-group-text">Fiyat</label>
                            <input data-dispatched="false" onchange="if(event.currentTarget.dataset.dispatched === 'false') {event.currentTarget.dataset.dispatched = 'true';event.currentTarget.dispatchEvent(new Event('editOffer', {cancelable:true, bubbles:true}))}" class="form-control rounded-2 small" placeholder="Fiyat" min="0.01" step="0.01" id="priceValue" type="number" name="@(nameof(Product.EditedOffer.Price))" value="@(decimal.Round(Model.SellerOffer?.Price ?? 0, 2).ToString("F1", CultureInfo.InvariantCulture))"/>
                        </div>
                        <div class="input-group">
                            <label class="input-group-text">İndirim</label>
                            <input onchange="if(event.currentTarget.dataset.dispatched ==='false'){event.currentTarget.dataset.dispatched='true';event.currentTarget.dispatchEvent(new Event('editOffer', {bubbles:true, cancelable:true}))}" class="form-control rounded-2 small" placeholder="İndirim" step="0.01" min="0" id="discountValue" type="number" name="@(nameof(Product.EditedOffer.Discount))" value="@Html.Raw((((1m - Model.SellerOffer?.Discount) * 100m) ?? 0m).ToString("F1", CultureInfo.InvariantCulture))"/>
                        </div>
                    </div>
                    }
                </div>
            </div>
            <ul class="col-5 h-100 list-unstyled d-flex flex-column gap-2 ps-1 py-1 pe-1">
                <li class="d-flex align-items-center align-content-center justify-content-center">
                    @await Html.PartialAsync("Shared/Product/_CategoryHierarchyPartial", (Model.ViewedProduct.CategoryId, Model.Categories))
                </li>
                <li id="title">
                    <div class="row d-flex justify-content-center container-fluid">
                        <b id="nameValue" class="col-auto" style="font-size: xx-large">@Model.ViewedProduct.Name</b>
                        @if (editable){
                            @await Html.PartialAsync(nameof(_EditablePartial), new _EditablePartial(){ OnClick = "event.currentTarget.dispatchEvent(new Event('edit', {bubbles:true, cancelable:true}));" })
                        }
                    </div>
                </li>
                @if (!Model.Creating){
                    <li id="aggregates" class="d-flex row justify-content-between">
                        <div class="col-auto d-inline-flex flex-column align-items-center justify-content-center align-content-center">
                            <p class="mx-3 col-auto align-self-start">@Model.ViewedProduct.Stats.SaleCount Kez satıldı</p>
                            <div>
                                @await Html.PartialAsync("Shared/Product/_FavoritePartial", (ViewData[nameof(Entity.User)] is Customer, ProductWithAggregatesCustomerView.Promote(Model.ViewedProduct, Model.Favorites)))
                            </div>
                        </div>
                        <div class="mx-3 col-auto">
                            <partial name="Shared/_ReviewStarPartial" model="new _ReviewStarPartial(){ Rating = Model.ViewedProduct.Stats.RatingAverage, RatingCount = (int)(Model.ViewedProduct.Stats.ReviewCount ) }"/>
                        </div>
                    </li>
                }
                @if (Model.Creating){
                    <li class="ps-2" id="offerOptions">
                        @await Html.PartialAsync("Shared/Product/_ProductOptionsPartial", new _ProductOptionsPartial(){
                            Editable = true, Creating=true, Options = [], PropertyCandidates = Model.Categories[Model.ViewedProduct.CategoryId].CategoryProperties
                        })
                    </li>
                }
                else{
                <li id="offerOptions" hx-get="/@(nameof(Product))?handler=options&@(nameof(Product.ProductId))=@(Model.ViewedProduct.Id)&categoryId=@(Model.ViewedProduct.CategoryId)" hx-trigger="fire"
                    hx-target="this" hx-swap="innerHTML" class="container-fluid">
                </li>
                <li id="offers" class="flex-grow-1 d-flex flex-column">
                    <script>
                        ((s)=>{
                            s.closest('.partial-parent').addEventListener('htmx:load', load);
                            document.addEventListener('DOMContentLoaded', load);
                            function load(e){
                                if(e.type ==='load') e.stopPropagation();
                                
                                @if (!Model.Creating && Model.ViewingSellerId == null){
                                    <text>
                                        const b= document.getElementById('addToCartForm').querySelector('button[type="submit"]');
                                        const quantityInput = document.getElementById('addToCartForm').querySelector('input[name="quantity"]');
                                        quantityInput.addEventListener('change', _=>{
                                            if(parseInt(quantityInput.value) @Html.Raw("<=") parseInt(quantityInput.max))
                                                quantityInput._oldVal = quantityInput.value;
                                            else quantityInput.value = quantityInput.max ?? null;
                                        });
                                            const bTooltip = new bootstrap.Tooltip(b, {toggle:false,title: 'Stokta yok', customClass:'bg-secondary-subtle'});
                                            bTooltip.disable();
                                    </text>    
                                }


                                document.getElementById('offerList').addEventListener('htmx:afterSwap', e=>{
                                    e.detail.elt.firstElementChild.style.maxHeight = (document.getElementById('carousels').offsetHeight - s.parentElement.offsetTop +s.parentElement.parentElement.offsetTop) + "px";
                                    e.detail.elt.firstElementChild.addEventListener('sellerSelected', e=>{
                                        e.stopPropagation();
                                        let opts = document.getElementById('offerOptions');
                                        opts.setAttribute('hx-vals', JSON.stringify({SellerId: e.detail.sellerId}));
                                        opts.dispatchEvent(new Event('fire', {bubbles:false, cancelable:true}));
                                        @if (!Model.Creating && Model.ViewingSellerId == null){
                                            <text>
                                            document.getElementById('sellerIdInput').value = e.detail.sellerId;
                                        if(e.detail.quantity){
                                            quantityInput.value = e.detail.quantity;
                                            document.getElementById('addToCartForm').querySelectorAll('button.existing-item').forEach(i=>i.classList.remove('d-none'));
                                        } else {
                                            quantityInput.value = null;
                                            document.getElementById('addToCartForm').querySelectorAll('button.existing-item').forEach(i => i.classList.add('d-none'));
                                        }
                                        document.getElementById('nav-reviews').querySelector('.review-form')._setSellerId(e.detail.sellerId);
                                        if(e.detail.stock === 0){
                                            b.disabled = true;
                                            bTooltip.enable();
                                        }else {
                                            quantityInput.max= e.detail.stock;
                                            b.disabled =false;
                                            bTooltip.disable();
                                        }
                                        </text>
                                        }
                                    });
                                })
                                @if (Model.ViewingSellerId!=null){
                                <text>
                                document.getElementById('offerList').addEventListener('htmx:afterSettle', e=>{
                                    e.detail.elt.firstElementChild.querySelectorAll(':scope>li').forEach(o=>{
                                        if(o.dataset.sellerid==='@(Model.ViewingSellerId)'){
                                            o.dispatchEvent(new Event('click', {bubbles:true, cancelable:true}));
                                        }
                                    })    
                                })
                                </text>
                                }
                            }
                        })(document.currentScript)
                        function fetchOffers(){
                            const o = document.getElementById('offerList');
                            o.setAttribute('hx-vals', JSON.stringify({sortColumn: o.dataset.sortcolumn, sortDesc: o.dataset.sortdesc == '1'}));
                            htmx.trigger(o,'fire');
                        }
                        //# sourceURL=ProductMainOfferList.js
                    </script>
                    <div id="offersParams" class="container-fluid d-flex align-items-center gap-2 justify-content-end mx-3">
                        <div class="fs-6 fw-bold text-center">Sırala:</div>
                        <div>
                            <a href="javascript:void(0);" onclick="document.getElementById('offerList').dataset.sortcolumn='@(nameof(OfferStats.ReviewAverage))';
                            event.currentTarget.nextElementSibling.firstElementChild.classList.add('text-secondary-emphasis');event.currentTarget.firstElementChild.classList.remove('text-secondary-emphasis');fetchOffers();"
                               class="p-0 text-decoration-none">
                                <i class="bi bi-star-fill fs-5 hover-darken-2 text-warning bg-light border-secondary-subtle border-1 rounded-2"></i>
                            </a>
                            <a href="javascript:void(0);" onclick="document.getElementById('offerList').dataset.sortcolumn='@(nameof(ProductOffer.Price))';
                            event.currentTarget.previousElementSibling.firstElementChild.classList.add('text-secondary-emphasis');event.currentTarget.firstElementChild.classList.remove('text-secondary-emphasis');fetchOffers();"
                               class="p-0 text-decoration-none">
                                <i class="bi bi-currency-dollar fs-5 hover-darken-2 text-secondary-emphasis text-success bg-light border-secondary-subtle border-1 rounded-2"></i>
                            </a>
                            <a href="javascript:void(0);" onclick="document.getElementById('offerList').dataset.sortdesc=(parseInt(document.getElementById('offerList').dataset.sortdesc) + 1)%2;event.currentTarget.firstElementChild.classList.toggle('bi-sort-numeric-down');event.currentTarget.firstElementChild.classList.toggle('bi-sort-numeric-up');fetchOffers();" class="p-0 text-decoration-none">
                                <i class="bi bi-sort-numeric-down fs-5 hover-darken-2 text-primary bg-light border-secondary-subtle border-1 rounded-2"></i>
                            </a>
                        </div>
                    </div>
                    <div data-sortColumn="@(nameof(OfferStats.ReviewAverage))" data-sortDesc="1" hx-get="/@(nameof(Product))?handler=offers&@(nameof(Product.ProductId))=@(Model.ViewedProduct.Id)"
                         hx-trigger="fire,load" hx-target="this" hx-swap="innerHTML" id="offerList" class="flex-grow-1 card overflow-y-auto overflow-x-hidden">
                    </div>
                </li>    
                }
                <li class="row container-fluid g-3 mx-4 justify-content-between">
                    @if (editable){
                        <div class="edit-control col-6">
                            <form id="editForm" hx-post="/@(nameof(Product))?handler=edit" hx-target="#popupResult" hx-swap="innerHTML" class="d-none">
                                @Html.AntiForgeryToken()
                                <input type="hidden" name="@(nameof(Product.EditedOffer)).Product.@(nameof(Entity.Product.CategoryId))" value="@Model.ViewedProduct.CategoryId"/>
                                <input type="hidden" name="@(nameof(Product.EditedOffer)).@(nameof(ProductOffer.ProductId))" value="@Model.ViewedProduct.Id"/>
                                <input type="hidden" name="@(nameof(Product.EditedOffer)).@nameof(ProductOffer.SellerId)" value="@Model.ViewingSellerId"/>
                                <input id="editedInput" type="hidden" name="@(nameof(Product.IsProductEdited))" value="false"/>
                                <input id="offerEditedInput" type="hidden" name="@nameof(Product.IsOfferEdited)" value="false"/>
                                <input id="nameInput" type="hidden" name="@(nameof(Product.EditedOffer)).Product.Name" value="@(Model.ViewedProduct.Name)"/>
                                <input id="descInput" type="hidden" name="@(nameof(Product.EditedOffer)).Product.Description" value="@(Model.ViewedProduct.Description)"/>
                                <input id="priceInput" type="hidden" name="@(nameof(Product.EditedOffer)).@(nameof(ProductOffer.Price))" value="-1"/>
                                <input id="stockInput" type="hidden" name="@(nameof(Product.EditedOffer)).@(nameof(ProductOffer.Stock))" value="-1"/>
                                <input id="discountInput" type="hidden" name="@(nameof(Product.EditedOffer)).@(nameof(ProductOffer.Discount))" value="-1"/>
                                <input id="widthInput" type="hidden" name="@(nameof(Product.EditedOffer)).@(nameof(ProductOffer.Product)).@(nameof(Entity.Product.Dimensions)).@(nameof(Dimensions.Width))" value="@(Model.ViewedProduct.Dimensions.Width)"/>
                                <input id="heightInput" type="hidden" name="@(nameof(Product.EditedOffer)).@(nameof(ProductOffer.Product)).@(nameof(Entity.Product.Dimensions)).@(nameof(Dimensions.Height))" value="@(Model.ViewedProduct.Dimensions.Height)"/>
                                <input id="depthInput" type="hidden" name="@(nameof(Product.EditedOffer)).@(nameof(ProductOffer.Product)).@(nameof(Entity.Product.Dimensions)).@(nameof(Dimensions.Depth))" value="@(Model.ViewedProduct.Dimensions.Depth)"/>
                                <input id="weightInput" type="hidden" name="@(nameof(Product.EditedOffer)).@(nameof(ProductOffer.Product)).@(nameof(Entity.Product.Dimensions)).@(nameof(Dimensions.Weight))" value="@(Model.ViewedProduct.Dimensions.Weight)"/>
                                <input id="sentImagesInput" type="hidden" name="@nameof(Product.SentImages)"/>
                            </form>
                        </div>
                    }
                    @if (!Model.Creating && Model.ViewingSellerId==null){
                        <div class="col-6 ms-auto me-4">
                            <form id="addToCartForm">
                                @Html.AntiForgeryToken()
                                <input id="sellerIdInput" type="hidden" name="sellerId" />
                                <div class="d-inline-flex justify-content-center align-items-center gap-2">
                                    <button onclick="event.currentTarget.nextElementSibling.value = -1;event.currentTarget.closest('form').dispatchEvent(new Event('submit', {bubbles:true, cancelable:true}))" type="button" class="p-0 btn hover-grow-small btn-link d-none existing-item"><i class="hover-grow-small bi bi-file-minus-fill rounded-circle fs-5 text-danger"></i></button>
                                    <input type="hidden" name="incr" min="-1" max="1"/>
                                    <input class="form-control small" type="number" min="0" name="quantity" placeholder="Miktar" required/>
                                    <button type="submit" class="btn btn-secondary rounded-2 opacity-75 shadow-sm hover-grow-small border-dark-subtle border-opacity-50" style="background-color: orange">Sepete Ekle</button>
                                    <button onclick="event.currentTarget.previousElementSibling.previousElementSibling.previousElementSibling.value = 1;event.currentTarget.closest('form').dispatchEvent(new Event('submit', {bubbles:true, cancelable:true}))" type="button" class="p-0 hover-grow-small btn btn-link"><i class="hover-grow-small bi bi-plus-circle-fill fs-5 text-success"></i></button>
                                </div>
                            </form>
                        </div>
                        <div id="addToCartResult"></div>
                    }
                </li>
            </ul>
        </li>
        <!--Tabs Section-->
        <li>
            <nav class="d-flex justify-content-center container-fluid">
                <div class="nav nav-tabs justify-content-between" id="nav-tab" role="tablist">
                    <div class="d-flex">
                        <button class="nav-link active" id="nav-info-tab" data-bs-toggle="tab" data-bs-target="#nav-info" type="button" role="tab" aria-controls="nav-info" aria-selected="true">Açıklama</button>
                        @await Html.PartialAsync(nameof(_EditablePartial), new _EditablePartial(){ Target = "descriptionValue", OnClick = "event.currentTarget.dispatchEvent(new Event('edit', {bubbles:true, cancelable:true}));" })
                    </div>
                    <button class="nav-link" id="nav-properties-tab" data-bs-toggle="tab" data-bs-target="#nav-properties" type="button" role="tab" aria-controls="nav-properties" aria-selected="false">Özellikler</button>
                    @if (!Model.Creating){
                    <button class="nav-link" id="nav-reviews-tab" data-bs-toggle="tab" data-bs-target="#nav-reviews" type="button" role="tab" aria-controls="nav-reviews" aria-selected="false">Değerlendirmeler</button>
                        
                    }
                </div>
            </nav>
            <div class="tab-content" id="nav-tabContent">
                <div class="tab-pane card border-bottom-0 fade show active" id="nav-info" role="tabpanel" aria-labelledby="nav-info-tab">
                    <div class="card-body p-4">
                        <p id="descriptionValue" class="lead">
                            @(Model.ViewedProduct.Description)
                        </p>
                    </div>
                </div>
                <div class="tab-pane card border-bottom-0 fade" id="nav-properties" role="tabpanel" aria-labelledby="#nav-properties-tab">
                    <div class="container-fluid my-2">
                        <ul id="properties" class="mx-3 container-fluid list-group">
                            @await Html.PartialAsync("Shared/_DimensionsPartial", new _DimensionsPartial(){
                                Dimensions = Model.ViewedProduct.Dimensions, Editable = Model.Editable || Model.Creating
                            })
                            @await Html.PartialAsync("Shared/Product/_CategoryPropertiesPartial", new _CategoryPropertiesPartial(){
                                Mode = _CategoryPropertiesPartial.DisplayMode.View, Editable = editable, Properties = Model.ViewedProduct.CategoryProperties,
                            })
                        </ul>
                    </div>
                </div>
                <div class="tab-pane fade" id="nav-reviews" role="tabpanel" aria-labelledby="#nav-reviews-tab">
                    @if (!Model.Creating){
                    <div class="container-fluid card bg-light">
                        <script>
                            ((s)=>{
                                document.addEventListener('DOMContentLoaded', load);
                                s.closest('.partial-parent').addEventListener('htmx:load', load);
                                let selectedRating, sortBy, sortOrder;
                                function load(e){
                                    const rstats = s.nextElementSibling.querySelector('.rating-stats-container');
                                   if(e.type==='htmx:load') 
                                       rstats.dispatchEvent(new Event(e.type, {cancelable:true, bubbles:false}));
                                   rstats.addEventListener('change', e=>{
                                       e.stopPropagation();
                                       if(e.detail.selectedRating===selectedRating && e.detail.sortBy === sortBy && e.detail.sortOrder===sortOrder)return;
                                       ({selectedRating, sortBy, sortOrder} = e.detail);
                                       const revs = s.parentElement.nextElementSibling.nextElementSibling;
                                       revs.setAttribute('hx-vals', JSON.stringify(e.detail));
                                       revs.dispatchEvent(new Event('fire', {bubbles:true}));
                                   })
                               }
                            })(document.currentScript)
                            //# sourceURL=ProductMainReviews.js
                        </script>
                        <div class="card-header-pills p-0">
                            @await Html.PartialAsync("Shared/Product/_ProductRatingStatsPartial", new _ProductRatingStatsPartial(){
                                ReviewStats = Model.ViewedProduct.RatingStats,
                            })    
                        </div>
                    </div>
                    <div class="container-fluid my-2 d-flex justify-content-center">
                        @if (!Model.Creating && Model.ViewingSellerId == null){
                            <script>
                            ((s)=>{
                                s.closest('.partial-parent').addEventListener('htmx:load', load);
                                document.addEventListener("DOMContentLoaded", load);
                                function load(e){
                                    if(e.type==='htmx:load')
                                        s.nextElementSibling.dispatchEvent(new Event('htmx:load', {bubbles:false, cancelable:true}))
                                    s.nextElementSibling.addEventListener('htmx:afterRequest', e=>{
                                        if(!e.detail.successful) return;
                                        s.parentElement.nextElementSibling.dispatchEvent(new Event('fire', {bubbles:true, cancelable:true}));
                                    })    
                                }
                            })(document.currentScript)
                            //# sourceURL=ProductMainReviewForm.js
                        </script>
                        }
                        @if (!Model.Creating && Model.ViewingSellerId == null){
                        @await Html.PartialAsync("Shared/Review/_ReviewFormPartial", new _ReviewFormPartial(){ ProductId = Model.ViewedProduct.Id })
                        }
                    </div>
                    <div class="my-3" hx-trigger="load,fire" hx-target="this" hx-on::before-swap="if(event.detail.xhr.status===204) event.detail.shouldSwap=true;" hx-swap="innerHTML" hx-get="/@(nameof(Reviews))?ProductId=@(Model.ViewedProduct.Id)" hx-vals='@Html.Raw(JsonSerializer.Serialize(new {sortBy=nameof(ProductReview.Created), sortOrder="desc"}))'>
                    </div>
                    }
                </div>
            </div>
        </li>
    </ul>
</div>
