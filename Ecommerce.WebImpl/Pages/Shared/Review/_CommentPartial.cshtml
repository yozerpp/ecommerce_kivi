@using Ecommerce.Entity
@model _CommentPartial
@{
    var editable = Model.CommentUserView.ReviewComment.UserId != null && Model.CommentUserView.ReviewComment.UserId.Value == (Context.Items[nameof(Entity.User)] as User)?.Id || 
    Model.CommentUserView.ReviewComment.CommenterId == (Context.Items[nameof(Entity.Session)] as Session)?.Id;
}
<div id="comment@(Model.CommentUserView.ReviewComment.Id)" class="partial-parent comment-partial border-start border-2 border-light ps-2 pt-2 mb-2">
    <div class="d-flex w-100 justify-content-between align-items-start">
        <h5 class="mb-1 text-primary fw-semibold fs-6">@(Model.CommentUserView.ReviewComment.User?.FullName?? (Model.CommentUserView.ReviewComment.Name ?? ""))</h5>
        <p class="mb-0 flex-grow-1 text-center ms-3 text-dark">@Model.CommentUserView.ReviewComment.Comment</p>
        <div class="d-inline-flex gap-2">
            @{var t = Utils.GetRelativeTime(Model.CommentUserView.ReviewComment.Created);}
            <small class="text-muted">@(t != null ? t : "Şimdi")</small>    
            @if(editable){
                <form id="deleteComment@(Model.CommentUserView.ReviewComment.Id)"  hx-trigger="submit" hx-target="#commentReplyResult@(Model.CommentUserView.ReviewComment.Id)"  hx-swap="innerHTML" hx-post="/@(nameof(Reviews))?handler=deleteComment">
                    @Html.AntiForgeryToken()
                    <input type="hidden" name="commentId" value="@Model.CommentUserView.ReviewComment.Id"/>
                    <button type="submit" class="btn border-1 rounded-2 border-secondary-subtle bg-light text-decoration-none p-0"><i class="bi bi-trash-fill text-danger"></i></button>
                </form>
            }
        </div>
        
    </div>
    <div class="small d-flex container-fluid align-items-center justify-content-end mt-2">
        <div class="d-inline-flex gap-3 align-items-center">
            <span class="d-inline-flex align-items-center text-muted">
                <button data-bs-placement="left" @Html.Raw(Model.CommentUserView.ReviewComment.Stats.ReplyCount?.Equals(0)??true?"disabled":"")) title="Cevapları Görüntüle" id="commentRepliesBtn@(Model.CommentUserView.ReviewComment.Id)" class="btn btn-sm btn-outline-secondary border-0 p-1 me-2 hover-grow-small fs-6" style="background-color: transparent;" hx-trigger="click" hx-target="#commentReplies@(Model.CommentUserView.ReviewComment.Id)" hx-swap="innerHTML" hx-get="/@nameof(Reviews)?handler=comments&ParentId=@(Model.CommentUserView.ReviewComment.Id)&ReviewId=@(Model.CommentUserView.ReviewComment.ReviewId)&NestLevel=@(Model.NestLevel + 1)">
                    <i class="bi bi-chat-dots"></i>
                </button> 
                <span class="badge bg-light text-dark">@Model.CommentUserView.ReviewComment.Stats.ReplyCount</span>
            </span>
            <a data-bs-placement="right" title="Cevapla" class="btn btn-sm btn-outline-primary p-1 text-decoration-none hover-grow-small fs-6" type="button" data-bs-toggle="collapse" data-bs-target="#replyComment@(Model.CommentUserView.ReviewComment.Id)" aria-expanded="false" aria-controls="replyComment@(Model.CommentUserView.ReviewComment.Id)">
                <i class="bi bi-reply"></i>
            </a>
            <script>
                ((cs)=>{
                    const parent = cs.closest('.partial-parent');
                    function load(e){
                        if(e.type ==='htmx:load'){
                            cs.nextElementSibling.dispatchEvent( new Event('htmx:load', {bubbles:false}));
                        }
                    }
                    parent.addEventListener('htmx:load', load);
                })(document.currentScript)
            </script>
            @await Html.PartialAsync("Shared/Review/_VotePartial", new _VotePartial(){
                ReviewId = null,
                CommentId = Model.CommentUserView.ReviewComment.Id,
                Karma = Model.CommentUserView.ReviewComment.Stats?.Votes ?? 0,
                CurrentUserVote = Model.CommentUserView.CurrentUserVote
            })

        </div>
    </div>
    <div class="collapse mt-2" id="replyComment@(Model.CommentUserView.ReviewComment.Id)">
        <script>
            ((s)=>{
                document.addEventListener('DOMContentLoaded', load);
                s.closest('.partial-parent').addEventListener('htmx:load', load);
                function load(e){
                    if(e.type ==='htmx:load'){e.stopPropagation();}
                    s.nextElementSibling.addEventListener('htmx:beforeSwap', e=>{
                        if(e.detail.xhr.status >=200 && e.detail.xhr.status < 300) e.detail.target=document.getElementById('commentReplies@(Model.CommentUserView.ReviewComment.Id)');
                        else e.detail.shouldSwap=true;
                    })
                    document.getElementById('commentReplyResult@(Model.CommentUserView.ReviewComment.Id)').addEventListener('htmx:beforeSwap',e=>{
                        if(e.detail.xhr.status >=200 && e.detail.xhr.status < 300){
                            e.detail.target = document.getElementById('commentReplies@(Model.CommentUserView.ReviewComment.Id)');
                        } else e.detail.shouldSwap = true;
                    })
                    document.getElementById('deleteComment@(Model.CommentUserView.ReviewComment.Id)').addEventListener('htmx:afterRequest', e=>{
                        if(!e.detail.successful)return; 
                        e.stopPropagation();
                        const parent = s.closest('.partial-parent');
                        parent.dispatchEvent(new Event('commentDeleted', {bubbles:true, cancelable:true}));
                        parent.remove();
                    })
                    document.getElementById('commentReplies@(Model.CommentUserView.ReviewComment.Id)').addEventListener('commentDeleted',e=>{
                        e.stopPropagation();
                        const s= document.getElementById('commentRepliesBtn@(Model.CommentUserView.ReviewComment.Id)').nextElementSibling;
                        s.innerHTML = parseInt(s.innerHTML) - 1;
                        if(!Array.from(document.getElementById('commentReplies@(Model.CommentUserView.ReviewComment.Id)').children).some(n=>n.nodeType === Node.ELEMENT_NODE)) document.getElementById('commentReplies@(Model.CommentUserView.ReviewComment.Id)').classList.remove('show');
                    })
                    s.nextElementSibling.addEventListener('htmx:afterRequest',e=>{
                        e.stopPropagation();
                        if(!e.detail.successful) return;
                        var s=document.getElementById('commentRepliesBtn@(Model.CommentUserView.ReviewComment.Id)').nextElementSibling;
                        s.innerHTML = parseInt(s.innerHTML) + 1;
                        const reply = document.getElementById('replyComment@(Model.CommentUserView.ReviewComment.Id)');
                        reply.style.transition = 'none';
                        reply.classList.remove('show');
                        void reply.offsetWidth;
                        reply.style.transition = "";
                        document.getElementById('')
                    });
                }
            })(document.currentScript)
            //# sourceURL=CommentPartialReload.js
        </script>
        <div class="border rounded p-2 bg-light">
            <form hx-post="/@(nameof(Reviews))?handler=comment" method="post" hx-target="#commentReplyResult@(Model.CommentUserView.ReviewComment.Id)" hx-swap="innerHTML">
                <input type="hidden" name="SentComment.ReviewId" value="@Model.CommentUserView.ReviewComment.ReviewId"/>
                <input type="hidden" name="@(nameof(Reviews.SentComment)).@nameof(ReviewComment.ParentId)" value="@Model.CommentUserView.ReviewComment.Id"/>
                @if(ViewContext.ViewData[nameof(Entity.User)] is null){
                    <div class="row d-inline-flex container-fluid mb-1">
                        <label class="fs-6 col-form-label-sm col-1">
                            İsminiz:
                        </label>
                        <input class="form-control-sm col-2" type="text" name="@(nameof(Reviews.SentComment)).@(nameof(ReviewComment.Name))" required/>
                        <div class="col-9"></div>
                    </div>
                }
                <div class="d-flex gap-2 align-items-end">
                    <div class="flex-grow-1">
                        <textarea class="form-control" rows="2" name="@(nameof(Reviews.SentComment)).@(nameof(ReviewComment.Comment))" placeholder="Cevaplayın..."></textarea>
                    </div>
                    <div>
                        <button type="button" onclick="event.currentTarget.parentElement.parentElement.parentElement.dispatchEvent(new Event('submit', {cancelable:true, bubbles:true}))" class="btn btn-primary btn-sm">Gönder</button>
                    </div>
                </div>
            </form>
            <div class="mt-2" id="commentReplyResult@(Model.CommentUserView.ReviewComment.Id)"></div>
        </div>
    </div>
    <div class="ms-2 mt-1" hx-on::after-swap="if(event.detail.xhr.status!==204) return;const b = document.getElementById('commentRepliesBtn@(Model.CommentUserView.ReviewComment.Id)').removeAttribute('hx-get');" id="commentReplies@(Model.CommentUserView.ReviewComment.Id)"></div>
</div>
