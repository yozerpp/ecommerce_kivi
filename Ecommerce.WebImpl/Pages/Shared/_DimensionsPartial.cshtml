@model _DimensionsPartial
<div class="container-fluid d-flex gap-3 input-group my-1 dimensions-container">
    <script>
        ((s) => {
            function initializeDimensions() {
                const parentElement = s.parentElement;
                
                // Select all dimension input elements
                const widthInput = parentElement.querySelector('[data-dimension-type="width"]');
                const heightInput = parentElement.querySelector('[data-dimension-type="height"]');
                const depthInput = parentElement.querySelector('[data-dimension-type="depth"]');
                const weightInput = parentElement.querySelector('[data-dimension-type="weight"]');
                
                const inputs = [widthInput, heightInput, depthInput, weightInput];
                
                // Function to update parent element properties
                function updateDimensions() {
                    parentElement._width = parseFloat(widthInput?.value || '0') || 0;
                    parentElement._height = parseFloat(heightInput?.value || '0') || 0;
                    parentElement._depth = parseFloat(depthInput?.value || '0') || 0;
                    parentElement._weight = parseFloat(weightInput?.value || '0') || 0;
                    parentElement._isEntered = true;
                    
                    // Create dimensions object
                    parentElement._dimensions = {
                        width: parentElement._width,
                        height: parentElement._height,
                        depth: parentElement._depth,
                        weight: parentElement._weight,
                        toString: function(sizeOnly = false) {
                            if (sizeOnly) {
                                return `${this.width}x${this.height}x${this.depth}`;
                            }
                            return `${this.weight}kg, ${this.width}x${this.height}x${this.depth}cm^3`;
                        }
                    };
                    
                    // Dispatch custom change event
                    parentElement.dispatchEvent(new Event('change', { bubbles: true }));
                    
                    @if (!string.IsNullOrEmpty(Model.OnChange))
                    {
                        <text>@Html.Raw(Model.OnChange)</text>
                    }
                }
                
                // Add event listeners to all inputs
                inputs.forEach(input => {
                    if (input) {
                        input.addEventListener('change', () => {
                            if (!input.reportValidity()) {
                                return; // Stop if validation fails
                            }
                            updateDimensions();
                        });
                        
                        input.addEventListener('input', updateDimensions);
                    }
                });
                
                // Initialize custom properties on the parent element
                parentElement._width = @(Model.Dimensions?.Width ?? 0);
                parentElement._height = @(Model.Dimensions?.Height ?? 0);
                parentElement._depth = @(Model.Dimensions?.Depth ?? 0);
                parentElement._weight = @(Model.Dimensions?.Weight ?? 0);
                parentElement._isEntered = false;
                parentElement._name = '@Model.InputName';
                
                // Initialize dimensions object
                updateDimensions();
            }
            
            // Attach initialization function to DOMContentLoaded and a custom 'init' event
            document.addEventListener('DOMContentLoaded', initializeDimensions);
            s.parentElement.addEventListener('init', initializeDimensions);
        })(document.currentScript);
    </script>
    
    @if (Model.Editable)
    {
        <a class="col-auto hover-grow hover-darken edit-control text-decoration-none text-secondary mx-3" href="javascript:void(0);" onclick="
            const container = this.parentElement;
            const inputs = container.querySelectorAll('input[data-dimension-type]');
            const displays = container.querySelectorAll('.dimension-display');
            
            if (inputs[0].style.display === 'none' || !inputs[0].style.display) {
                // Show inputs, hide displays
                inputs.forEach(input => input.style.display = 'block');
                displays.forEach(display => display.style.display = 'none');
                inputs[0].focus();
            } else {
                // Hide inputs, show displays
                inputs.forEach(input => input.style.display = 'none');
                displays.forEach(display => display.style.display = 'block');
            }
        ">
            <i class="bi bi-pencil-fill"></i>
        </a>
    }
    
    <div class="d-flex align-items-center gap-1">
        <label class="fw-bold fs-6">Width</label>
        @if (Model.Editable)
        {
            <span class="dimension-display form-control rounded-1 border-light-subtle">@(Model.Dimensions?.Width ?? 0)</span>
            <input data-dimension-type="width" type="number" step="0.01" min="0" 
                   class="form-control rounded-1 border-light-subtle" 
                   value="@(Model.Dimensions?.Width ?? 0)"
                   placeholder="Width" name="@(Model.InputName).Width"
                   style="display: none;" />
        }
        else
        {
            <span class="form-control rounded-1 border-light-subtle">@(Model.Dimensions?.Width ?? 0)</span>
        }
        <small class="text-muted">cm</small>
    </div>
    
    <div class="d-flex align-items-center gap-1">
        <label class="fw-bold fs-6">Height</label>
        @if (Model.Editable)
        {
            <span class="dimension-display form-control rounded-1 border-light-subtle">@(Model.Dimensions?.Height ?? 0)</span>
            <input data-dimension-type="height" type="number" step="0.01" min="0" 
                   class="form-control rounded-1 border-light-subtle" 
                   value="@(Model.Dimensions?.Height ?? 0)"
                   placeholder="Height" name="@(Model.InputName).Height"
                   style="display: none;" />
        }
        else
        {
            <span class="form-control rounded-1 border-light-subtle">@(Model.Dimensions?.Height ?? 0)</span>
        }
        <small class="text-muted">cm</small>
    </div>
    
    <div class="d-flex align-items-center gap-1">
        <label class="fw-bold fs-6">Depth</label>
        @if (Model.Editable)
        {
            <span class="dimension-display form-control rounded-1 border-light-subtle">@(Model.Dimensions?.Depth ?? 0)</span>
            <input data-dimension-type="depth" type="number" step="0.01" min="0" 
                   class="form-control rounded-1 border-light-subtle" 
                   value="@(Model.Dimensions?.Depth ?? 0)"
                   placeholder="Depth" name="@(Model.InputName).Depth"
                   style="display: none;" />
        }
        else
        {
            <span class="form-control rounded-1 border-light-subtle">@(Model.Dimensions?.Depth ?? 0)</span>
        }
        <small class="text-muted">cm</small>
    </div>
    
    <div class="d-flex align-items-center gap-1">
        <label class="fw-bold fs-6">Weight</label>
        @if (Model.Editable)
        {
            <span class="dimension-display form-control rounded-1 border-light-subtle">@(Model.Dimensions?.Weight ?? 0)</span>
            <input data-dimension-type="weight" type="number" step="0.01" min="0" 
                   class="form-control rounded-1 border-light-subtle" 
                   value="@(Model.Dimensions?.Weight ?? 0)"
                   placeholder="Weight" name="@(Model.InputName).Weight"
                   style="display: none;" />
        }
        else
        {
            <span class="form-control rounded-1 border-light-subtle">@(Model.Dimensions?.Weight ?? 0)</span>
        }
        <small class="text-muted">kg</small>
    </div>
</div>
