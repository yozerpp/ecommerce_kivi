@model Ecommerce.WebImpl.Pages.Shared.SearchBar._DimensionsPartial

<div class="@Model.ClassNames dimensions-container">
    <div class="row g-2">
        <div class="col-md-6">
            <div class="d-flex align-items-center gap-2">
                <label class="fw-bold text-muted small">Ağırlık:</label>
                <span id="weight-display" class="fs-6 editable-field badge bg-light text-dark" data-dimtype="weight">@(Model.Dimensions.Weight) kg</span>
            </div>
        </div>
        <div class="col-md-6">
            <div class="d-flex align-items-center gap-2">
                <label class="fw-bold text-muted small">Boyutlar (G×Y×D):</label>
                <span class="fs-6 dimensions-display">
                    <span id="width-display" class="editable-field badge bg-light text-dark" data-dimtype="width">@(Model.Dimensions.Width)</span>×<span id="height-display" class="editable-field badge bg-light text-dark" data-dimtype="height">@(Model.Dimensions.Height)</span>×<span id="depth-display" class="editable-field badge bg-light text-dark" data-dimtype="depth">@(Model.Dimensions.Depth)</span> cm
                </span>
            </div>
        </div>
    </div>
    
    @if (Model.Editable)
    {
        <div class="mt-2 d-flex justify-content-end">
            @await Html.PartialAsync("Shared/_EditablePartial", new _EditablePartial(){
                Target = "weight-display,width-display,height-display,depth-display",
                OnClick = "document.querySelector('.dimensions-container').dataset.editing = 'true';"
            })
        </div>
    }
</div>

<script>
    document.addEventListener('contentChanged', function(e) {
        if (e.target.classList.contains('editable-field')) {
            const dimType = e.target.dataset.dimtype;
            const newValue = parseFloat(e.target.textContent.replace(/[^\d.]/g, ''));
            
            if (!isNaN(newValue)) {
                // Update the display with proper units
                switch(dimType) {
                    case 'weight':
                        e.target.textContent = newValue + ' kg';
                        break;
                    case 'width':
                    case 'height':
                    case 'depth':
                        e.target.textContent = newValue;
                        break;
                }
                
                // Dispatch event for external handling
                document.dispatchEvent(new CustomEvent('dimensionChanged', {
                    detail: {
                        type: dimType,
                        value: newValue,
                        element: e.target
                    }
                }));
            }
            
            document.querySelector('.dimensions-container').dataset.editing = 'false';
        }
    });
</script>

<style>
    .dimensions-container {
        background: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 0.5rem;
        padding: 1rem;
        box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }
    
    .editable-field {
        cursor: pointer;
        transition: all 0.2s ease;
        min-width: 3rem;
        display: inline-block;
        font-weight: 500;
        border: 1px solid transparent;
    }
    
    .editable-field:hover {
        background: rgba(13, 110, 253, 0.1) !important;
        border-color: rgba(13, 110, 253, 0.3);
        transform: scale(1.05);
    }
    
    .editable-field[contenteditable="true"] {
        background: #fff !important;
        border-color: #0d6efd;
        box-shadow: 0 0 0 2px rgba(13, 110, 253, 0.25);
        outline: none;
    }
    
    .dimensions-display {
        font-family: 'Courier New', monospace;
        font-weight: 500;
        letter-spacing: 0.5px;
    }
    
    .dimensions-container label {
        font-size: 0.875rem;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
</style>
