@model _SliderPartial
<div class="container-fluid d-flex gap-3 input-group my-1">
    <script>
        ((s) => {
            function initializeSlider() {
                const parentElement = s.parentElement;
                // Select min and max input elements
                const minInput = parentElement.querySelector('[data-slider-type="min"]');
                const maxInput = parentElement.querySelector('[data-slider-type="max"]');

                // Store references to the "other" input for validation/attribute updates
                if (minInput && maxInput) {
                    minInput._other = maxInput;
                    maxInput._other = minInput;

                    // Event listener for min input changes
                    minInput.addEventListener('change', () => {
                        if (!minInput.reportValidity()) {
                            return; // Stop if validation fails
                        }
                        // Update max attribute of the other input to prevent invalid ranges
                        maxInput.setAttribute('min', minInput.value);
                        parentElement._isEntered = true;
                        parentElement._min = minInput.value;
                        // Dispatch a custom change event to notify parent components
                        parentElement.dispatchEvent(new Event('change', { bubbles: true }));
                    });

                    // Event listener for max input changes
                    maxInput.addEventListener('change', () => {
                        if (!maxInput.reportValidity()) {
                            return; // Stop if validation fails
                        }
                        // Update min attribute of the other input to prevent invalid ranges
                        minInput.setAttribute('max', maxInput.value);
                        parentElement._isEntered = true;
                        parentElement._max = maxInput.value;
                        // Dispatch a custom change event to notify parent components
                        parentElement.dispatchEvent(new Event('change', { bubbles: true }));
                    });
                }

                // Initialize custom properties on the parent element
                parentElement._max = @Model.MaxValue;
                parentElement._min = @Model.MinValue;
                parentElement._isEntered = false; // Flag to indicate if user has interacted
                parentElement._name = '@Model.InputName';
            }

            // Attach initialization function to DOMContentLoaded and a custom 'init' event
            document.addEventListener('DOMContentLoaded', initializeSlider);
            s.parentElement.addEventListener('init', initializeSlider);
        })(document.currentScript);
    </script>
    <div class="d-flex align-items-center gap-1">
        <label class="fw-bold fs-6">Min</label>
        <input data-slider-type="min" type="number" step="@Model.Step" class="form-control rounded-1 border-light-subtle"
               min="@(Model.MinValue)" max="@(Model.MaxValue)"
               aria-placeholder="@Model.MinValue" placeholder="Min" name="@Model.InputName"/>
    </div>
    <div class="d-flex align-items-center gap-1">
        <label class="fw-bold fs-6">Max</label>
        <input data-slider-type="max" step="@Model.Step" type="number" class="form-control rounded-1 border-light-subtle"
               min="@(Model.MinValue)" max="@(Model.MaxValue)"
               aria-placeholder="@Model.MaxValue" placeholder="Maks" name="@(Model.InputName)"/>
    </div>
</div>
