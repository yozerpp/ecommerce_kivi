@using Ecommerce.Entity
@using Ecommerce.Entity.Views
@inject Localizer Localizer
@model Ecommerce.WebImpl.Pages.Shared.SearchBar._OrderingPartial

<div class="overflow-y-scroll" style="max-height: 300px;">
    <style>
        .sort-item {
            margin-bottom: 0.25rem;
        }
        .sort-toggle.ascending {
            background-color: #28a745;
            border-color: #28a745;
        }
        .sort-toggle.descending {
            background-color: #dc3545;
            border-color: #dc3545;
        }
        .sort-toggle.unselected {
            background-color: #6c757d;
            border-color: #6c757d;
        }
    </style>
    
    <script>
        ((s) => {
            function initializeOrdering() {
                const orderList = s.parentElement;
                orderList._orders = new Map();

                orderList.querySelectorAll('.sort-item').forEach(item => {
                    const selectedInput = item.querySelector('input[name="@nameof(HomepageModel.OrderInput.Selected)"]');
                    const ascInput = item.querySelector('input[value="true"]');
                    const descInput = item.querySelector('input[value="false"]');
                    const toggleButton = item.querySelector('.sort-toggle');
                    
                    const propertyName = selectedInput.dataset.propname;
                    
                    // Initialize state
                    let state = 'unselected'; // unselected, ascending, descending
                    if (selectedInput.checked) {
                        state = ascInput.checked ? 'ascending' : 'descending';
                    }
                    
                    function updateState(newState) {
                        state = newState;
                        
                        // Update hidden inputs
                        selectedInput.checked = state !== 'unselected';
                        if (state !== 'unselected') {
                            ascInput.checked = state === 'ascending';
                            descInput.checked = state === 'descending';
                        } else {
                            ascInput.checked = false;
                            descInput.checked = false;
                        }
                        
                        // Update button appearance and text
                        toggleButton.className = `btn btn-sm sort-toggle ${state}`;
                        switch(state) {
                            case 'ascending':
                                toggleButton.textContent = 'Artan ↑';
                                break;
                            case 'descending':
                                toggleButton.textContent = 'Azalan ↓';
                                break;
                            default:
                                toggleButton.textContent = 'Sırala';
                        }
                        
                        // Update internal state map
                        orderList._orders.set(propertyName, {
                            selected: state !== 'unselected',
                            ascending: state === 'descending'
                        });
                        
                        // Dispatch change event
                        orderList.dispatchEvent(new Event('change', { bubbles: true }));
                    }
                    
                    // Set initial state
                    updateState(state);
                    
                    // Click handler for cycling through states
                    toggleButton.addEventListener('click', (e) => {
                        e.stopPropagation();
                        const nextState = {
                            'unselected': 'ascending',
                            'ascending': 'descending',
                            'descending': 'unselected'
                        };
                        updateState(nextState[state]);
                    });
                });
            }

            document.addEventListener('DOMContentLoaded', initializeOrdering);
            s.parentElement.addEventListener('init', initializeOrdering);
        })(document.currentScript);
    </script>
    
    @foreach (var prop in typeof(ProductStats).GetProperties().Where(p => !p.Name.Equals(nameof(ProductStats.ProductId))))
    {
        <div class="sort-item dropdown-item d-flex align-items-center" onclick="event.stopPropagation();">
            <div class="flex-grow-1">
                <span class="me-2">@(Localizer.GetLocalization(typeof(ProductStats), prop.Name))</span>
            </div>
            <div>
                <button type="button" class="sort-toggle btn btn-sm btn-secondary">
                    Sırala
                </button>
            </div>
            
            <!-- Hidden inputs to maintain form compatibility -->
            <input type="hidden" data-propname="@(nameof(Product.Stats))_@prop.Name" name="@nameof(HomepageModel.OrderInput.Selected)" />
            <input type="hidden" name="@(prop.Name)Ascending" value="true" />
            <input type="hidden" name="@(prop.Name)Ascending" value="false" />
        </div>
    }
</div>
