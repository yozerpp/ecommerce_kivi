@using Ecommerce.Entity
@using Ecommerce.Entity.Views
@model Ecommerce.WebImpl.Pages.Shared.SearchBar._OrderingPartial

<div class="p-3 bg-light rounded-3 shadow-sm" style="max-height: 400px; overflow-y: auto;">
    <style>
        .sort-item {
            transition: all 0.2s ease;
            border: 2px solid transparent;
            margin-bottom: 0.5rem;
        }
        .sort-item:hover {
            background-color: #f8f9fa;
            border-color: #dee2e6;
        }
        .sort-toggle {
            cursor: pointer;
            transition: all 0.3s ease;
            border: none;
            background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
            color: white;
            min-width: 80px;
            font-weight: 500;
        }
        .sort-toggle:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.15);
        }
        .sort-toggle.ascending {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        }
        .sort-toggle.descending {
            background: linear-gradient(135deg, #dc3545 0%, #fd7e14 100%);
        }
        .sort-toggle.unselected {
            background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
        }
        .property-label {
            font-weight: 600;
            color: #495057;
            background: white;
            border: 1px solid #dee2e6;
            border-radius: 0.375rem 0 0 0.375rem;
        }
    </style>
    
    <script>
        ((s) => {
            function initializeOrdering() {
                const orderList = s.parentElement;
                orderList._orders = new Map();

                orderList.querySelectorAll('.sort-item').forEach(item => {
                    const selectedInput = item.querySelector('input[name="@nameof(HomepageModel.OrderInput.Selected)"]');
                    const ascInput = item.querySelector('input[value="true"]');
                    const descInput = item.querySelector('input[value="false"]');
                    const toggleButton = item.querySelector('.sort-toggle');
                    
                    const propertyName = selectedInput.dataset.propname;
                    
                    // Initialize state
                    let state = 'unselected'; // unselected, ascending, descending
                    if (selectedInput.checked) {
                        state = ascInput.checked ? 'ascending' : 'descending';
                    }
                    
                    function updateState(newState) {
                        state = newState;
                        
                        // Update hidden inputs
                        selectedInput.checked = state !== 'unselected';
                        if (state !== 'unselected') {
                            ascInput.checked = state === 'ascending';
                            descInput.checked = state === 'descending';
                        } else {
                            ascInput.checked = false;
                            descInput.checked = false;
                        }
                        
                        // Update button appearance and text
                        toggleButton.className = `btn sort-toggle ${state}`;
                        switch(state) {
                            case 'ascending':
                                toggleButton.innerHTML = '<i class="fas fa-sort-up me-1"></i>Artan';
                                break;
                            case 'descending':
                                toggleButton.innerHTML = '<i class="fas fa-sort-down me-1"></i>Azalan';
                                break;
                            default:
                                toggleButton.innerHTML = '<i class="fas fa-sort me-1"></i>Sırala';
                        }
                        
                        // Update internal state map
                        orderList._orders.set(propertyName, {
                            selected: state !== 'unselected',
                            ascending: state === 'ascending'
                        });
                        
                        // Dispatch change event
                        orderList.dispatchEvent(new Event('change', { bubbles: true }));
                    }
                    
                    // Set initial state
                    updateState(state);
                    
                    // Click handler for cycling through states
                    toggleButton.addEventListener('click', (e) => {
                        e.stopPropagation();
                        const nextState = {
                            'unselected': 'ascending',
                            'ascending': 'descending',
                            'descending': 'unselected'
                        };
                        updateState(nextState[state]);
                    });
                });
            }

            document.addEventListener('DOMContentLoaded', initializeOrdering);
            s.parentElement.addEventListener('init', initializeOrdering);
        })(document.currentScript);
    </script>
    
    @foreach (var prop in typeof(ProductStats).GetProperties().Where(p => !p.Name.Equals(nameof(ProductStats.ProductId))))
    {
        <div class="sort-item d-flex align-items-center rounded-2 p-2">
            <div class="flex-grow-1">
                <label class="property-label form-control border-end-0 mb-0">@(prop.Name)</label>
            </div>
            <div class="ms-2">
                <button type="button" class="sort-toggle btn">
                    <i class="fas fa-sort me-1"></i>Sırala
                </button>
            </div>
            
            <!-- Hidden inputs to maintain form compatibility -->
            <input type="hidden" data-propname="@(nameof(Product.Stats))_@prop.Name" name="@nameof(HomepageModel.OrderInput.Selected)" />
            <input type="hidden" name="@(prop.Name)Ascending" value="true" />
            <input type="hidden" name="@(prop.Name)Ascending" value="false" />
        </div>
    }
</div>
