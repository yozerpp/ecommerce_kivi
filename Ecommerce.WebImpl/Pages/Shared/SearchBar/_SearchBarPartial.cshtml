@using Ecommerce.Bl.Interface
@using Ecommerce.Entity
@using Ecommerce.Entity.Views
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Index = System.Index
@using Product = Ecommerce.WebImpl.Pages.Product
@model Ecommerce.WebImpl.Pages.Shared._SearchBarPartial

@{
    var formId = (Model.Target?.ToLowerInvariant() ?? "searchBar") +"Form";
}
<div id="@(formId)">
    <script>
        let filterDropdown;
        document.addEventListener("DOMContentLoaded", ()=> {
            filterDropdown= new bootstrap.Dropdown(document.getElementById('filtersButton'), {
                autoClose: false,reference: document.getElementById('filters')
            });
            (()=>{
               document.getElementById('@(formId)Submit').addEventListener('click', e=>{
                   let params=[];
                   // Add Product Name
                   const searchNameInput = document.getElementById('@(formId)Search');
                   if (searchNameInput && searchNameInput.value) {
                       params.push(`@(nameof(Entity.Product.Name))=${(searchNameInput.value)}`);
                   }

                   // Add Category
                   const categoryIdInput = document.getElementById('categoryIdInput');
                   if (categoryIdInput && categoryIdInput.value) {
                       params.push(`@(nameof(Entity.Product.Category))_@(nameof(Category.Id))=${(categoryIdInput.value)}`);
                   }

                   // Add Range Filters
                   document.getElementById('ranges').querySelectorAll('.input-group').forEach(i=>{
                       if(i._isEntered!==true)return; // Assuming _isEntered and _name, _max, _min are set by the slider partial
                       params.push(`&(${(i._name)}<=${(i._max)},${(i._name)}>=${(i._min)})`);
                   });
                   // Add Category Properties
                   const categoryProperties = document.getElementById('categoryProperties').firstElementChild;
                   if (categoryProperties && categoryProperties._hasProps) {
                        const ar = Array.from(categoryProperties._props.entries());
                        const qs = ar.map(e=>{
                            const [k,v] = e;
                            let q = 
                                `&(@(nameof(Entity.Product.CategoryProperties))_@(nameof(ProductCategoryProperties.CategoryPropertyId))=${k},`;
                            if(v.hasOwnProperty('min')){
                                q += `@(nameof(Entity.Product.CategoryProperties))_@(nameof(ProductCategoryProperties.Value))>=${v.min},`+
                                `@(nameof(Entity.Product.CategoryProperties))_@(nameof(ProductCategoryProperties.Value))<=${v.max})`;
                            } else if(v.hasOwnProperty('enumValue')){
                                q+=`@(nameof(Entity.Product.CategoryProperties))_@(nameof(ProductCategoryProperties.Value))=${v.enumValue}`
                            } else q += `@(nameof(Entity.Product.CategoryProperties))_@(nameof(ProductCategoryProperties.Value))=${v}`;
                            return q + ')';
                        });
                        if(ar.length > 0)
                            params.push('|('+qs.join(',') + ')');
                        else params.push(qs[0]);
                   }
                   // Remove leading '&' if present
                   let query = encodeURIComponent(params.length >1? '&(' + params.join(',') + ')':params[0]);
                   @if (Model.IsJson){
                    <text>
                        query+= '&JsonResult=true';
                   </text>
                   }
                   window.location.replace( '/Index?@(nameof(HomepageModel.QueryString))=' + query);
               });
            })()
        });
    </script>
    @Html.AntiForgeryToken()
    <input type="hidden" id="categoryIdInput" name="@(nameof(HomepageModel.SearchCategory))"/>
    <div class="d-flex gap-1">
        <div class="input-group rounded-start-2">
            <button id="@(formId)Submit" class="input-group-text rounded-start-2 rounded-end-0 btn-primary btn" type="button">
                <i class="bi bi-search m-0" style="font-size: large"></i> 
            </button>
            <div class="dropdown my-0">
                <button id="pickerBtn" class="my-0 dropdown-toggle btn btn-outline-light text-dark rounded-0 box-shadow" data-bs-toggle="dropdown" data-bs-target="#categoryPicker" aria-expanded="false">Tümü</button>
                <div id="categoryPicker" class="dropdown-menu rounded-bottom-2 border-1">
                    @await Html.PartialAsync("Shared/SearchBar/_CategoryPicker", new _CategoryPicker(Model.Categories,displayElementId:"pickerBtn", inputElementId:"categoryIdInput", targetElementId:"categoryProperties"))
                </div>
            </div>
            <input id="@(formId)Search" class="rounded-1 rounded-start-0 form-control" type="text" @Html.Raw(Model.Target!=null?$"onchange=\"document.getElementById('{formId}Submit').dispatchEvent(new Event('click', {{cancelable: true, bubbles: true}}))\"":"") value="@null" name="@(nameof(HomepageModel.SearchName))" />
        </div>
        <div class="btn-group justify-content-center mx-1 align-items-center gap-2">
            <button type="button" class="dropdown-toggle btn btn-outline-info" onclick="filterDropdown.toggle();event.stopImmediatePropagation();">
                Filtreler
            </button>
            <div class="dropdown">
                <button  type="button" id="ordersButton" class="btn btn-outline-light text-dark dropdown-toggle"  
                        data-bs-toggle="dropdown" data-bs-target="#order" aria-expanded="false">Sıralama</button>
                <ul id="order" class="dropdown-menu overflow-y-scroll rounded-end-2" style="max-height: 300px;">
                    @foreach (var prop in typeof(ProductStats).GetProperties().Where(p=>!p.Name.Equals(nameof(ProductStats.ProductId)))){
                        <li class="dropdown-item row g-0 rounded-0">
                            <div class="input-group col-auto row m-0 p-0 g-2 container-fluid">
                                <label class="col-11 btn-outline-secondary bg-secondary-subtle input-group-text" for="@(prop.Name)Order">@(prop.Name)</label>
                                <input id="@(prop.Name)Order" oninput="event.currentTarget.parentElement.nextElementSibling.classList.toggle('d-none')" class="col-1" type="checkbox" name="Orders[@(prop.Name)].@nameof(HomepageModel.OrderInput.Selected)"/>
                            </div>
                            <div class="col-auto d-none">
                                <div class="input-group container-fluid row m-0 p-0 g-2">
                                    <label class="col-11 input-group-text" for="@(prop.Name)Asc">Artan</label>
                                    <input id="@(prop.Name)Asc" class="col-1" type="radio" name="Orders[@(prop.Name)].@nameof(HomepageModel.OrderInput.Ascending)" value="true"/>
                                </div>
                                <div class="container-fluid input-group m-0 p-0 g-2 row">
                                    <label class="col-11  input-group-text" for="@(prop.Name)Desc">Azalan</label>
                                    <input id="@(prop.Name)Desc" class="col-1" type="radio" name="Orders[@(prop.Name)].@nameof(HomepageModel.OrderInput.Ascending)" value="false"/>
                                </div>
                            </div>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
    <div class="dropdown">
        <button type="button" id="filtersButton" role="button" class="dropdown-toggle" data-bs-toggle="dropdown" hidden aria-expanded="false"></button>
        <div id="filters" class="dropdown-menu border-top-0 rounded-2" >
            <ul class="list-unstyled gap-3 g-3">
                <li hx-on::after-settle="event.detail.elt.firstElementChild.dispatchEvent(new Event('init', {bubbles:false}));"
                    id="categoryProperties" hx-get="/@(nameof(Product))?handler=categoryProperties&idPrefix=@(nameof(HomepageModel.PropertyFilters))" hx-target="this" hx-swap="innerHTML" hx-trigger="fire">
                </li>
                <li id="ranges" class="row row-cols-6 g-2 d-flex ps-2">
                    <h4 class="fw-bold col-12 fs-5">İstatistik Özellikleri</h4>
                    <div class="col-6 gap-1">
                        <div>
                            Satılma Sayısı
                        </div>
                        <div id="saleCountRange">
                            @await Html.PartialAsync("Shared/SearchBar/_SliderPartial", new _SliderPartial(){
                                MaxValue = 1000000,
                                MinValue = 0,
                                InputName = string.Join('_', nameof(Entity.Product.Stats), nameof(ProductStats.SaleCount)),
                            })
                        </div>
                    </div>
                    <div class="col-6 gap-1">
                        <div>İade Sayısı</div>
                        <div id="refundCountRange">
                            @await Html.PartialAsync("Shared/SearchBar/_SliderPartial", new _SliderPartial(){
                                MaxValue = 1000000,
                                MinValue = 0,
                                InputName = string.Join('_', nameof(Entity.Product.Stats), nameof(ProductStats.RefundCount)),
                            })
                        </div>
                    </div>
                    <div class="col-6 gap-1">
                        <div>
                            Favorilere Eklenme Sayııs
                        </div>
                        <div id="favoriteRange">
                            <input type="hidden" name=""/>
                            @await Html.PartialAsync("Shared/SearchBar/_SliderPartial", new _SliderPartial(){
                                MaxValue = 1000000,
                                MinValue = 0,
                                InputName = string.Join('_', nameof(Entity.Product.Stats), nameof(ProductStats.FavorCount)),
                            })
                        </div>
                    </div>
                    <div class="col-6 gap-1">
                        <div>
                            Değerlendirme Sayısı
                        </div>
                        <div id="ratingCountRange">
                            @await Html.PartialAsync("Shared/SearchBar/_SliderPartial", new _SliderPartial(){
                                MaxValue = 1000000,
                                MinValue = 0,
                                InputName = string.Join('_', nameof(Entity.Product.Stats), nameof(ProductStats.ReviewCount)),
                            })
                        </div>
                    </div>
                    <div class="col-6 gap-1">
                        <div>
                            Değerlendirme Ortalaması
                        </div>
                        <div id="ratingRange">
                            @await Html.PartialAsync("Shared/SearchBar/_SliderPartial", new _SliderPartial(){
                                MinValue = 0,
                                MaxValue = 5,
                                Step = "0.1",
                                InputName = string.Join('_', nameof(Entity.Product.Stats), nameof(ProductStats.RatingAverage)),
                            })
                        </div>
                    </div>
                    <div class="col-6 gap-1">
                        <div>Fiyat</div>
                        <div id="priceRange">
                            @await Html.PartialAsync("Shared/SearchBar/_SliderPartial", new _SliderPartial(){
                                MaxValue = 1000000, MinValue = 0,
                                Step = "0.1",
                                InputName = string.Join('_', nameof(Entity.Product.Stats), nameof(ProductStats.MinPrice)),
                            })
                        </div>
                    </div>
                </li>
            </ul>
        </div>
    </div>
</div>
