@using Ecommerce.Bl.Interface
@using Ecommerce.Entity
@using Ecommerce.Entity.Views
@using Ecommerce.WebImpl.Pages.Shared.Product
@using Microsoft.EntityFrameworkCore.Metadata.Internal
@using Index = System.Index
@using Product = Ecommerce.WebImpl.Pages.Product
@model Ecommerce.WebImpl.Pages.Shared._SearchBarPartial

@{
    var formId = (Model.Target?.ToLowerInvariant().Replace("#","").Replace("-","_") ?? "searchBar") +"Form";
}
<div id="@(formId)">
    <script>
        let filterDropdown@(formId);
        let orderDropdown@(formId);
        document.addEventListener("DOMContentLoaded", ()=> {
            filterDropdown@(formId)= new bootstrap.Dropdown(document.getElementById('filtersButton'), {
                autoClose: 'outside',reference: document.getElementById('filters')
            });
            orderDropdown@(formId) = new bootstrap.Dropdown(document.getElementById('ordersButton'), {
                autoClose: 'outside',reference: document.getElementById('order')
            });
            (()=>{
               document.getElementById('@(formId)Submit').addEventListener('click', e=>{
                   if(Array.from(document.getElementById('filters').querySelectorAll('input')).map(i=>i.reportValidity()).some(b=>!b))
                       return;
                   let params=[];
                   // Add Product Name
                   const searchNameInput = document.getElementById('@(formId)Search');
                   if (searchNameInput && searchNameInput.value) {
                       params.push(`@(nameof(Entity.Product.Name))=${(searchNameInput.value)}`);
                   }

                   // Add Category
                   const categoryIdInput = document.getElementById('categoryIdInput');
                   if (categoryIdInput && categoryIdInput?.value!==undefined && categoryIdInput.value !== '0' && categoryIdInput.value !== '') {
                       params.push(`@(nameof(Entity.Product.Category))_@(nameof(Category.Id))=${(categoryIdInput.value)}`);
                   }

                   // Add Range Filters
                   document.getElementById('ranges').querySelectorAll('.input-group').forEach(i=>{
                       if(i._isEntered!==true)return; // Assuming _isEntered and _name, _max, _min are set by the slider partial
                       params.push(`&(${(i._name)}<=${(i._max)},${(i._name)}>=${(i._min)})`);
                   });
                   // Add Category Properties
                   const categoryProperties = document.getElementById('categoryProperties').firstElementChild;
                   if (categoryProperties && categoryProperties._hasProps) {
                        const ar = Array.from(categoryProperties._props.entries());
                        const qs = ar.map(e=>{
                            const [k,v] = e;
                            let q = 
                                `&(@(nameof(Entity.Product.CategoryProperties))_@(nameof(ProductCategoryProperty.CategoryPropertyId))=${k},`;
                            if(v.hasOwnProperty('min')){
                                q += `@(nameof(Entity.Product.CategoryProperties))_@(nameof(ProductCategoryProperty.Value))>=${v.min},`+
                                `@(nameof(Entity.Product.CategoryProperties))_@(nameof(ProductCategoryProperty.Value))<=${v.max})`;
                            } else if(v.hasOwnProperty('enumValue')){
                                q+=`@(nameof(Entity.Product.CategoryProperties))_@(nameof(ProductCategoryProperty.Value))=${v.enumValue}`
                            } else q += `@(nameof(Entity.Product.CategoryProperties))_@(nameof(ProductCategoryProperty.Value))=${v}`;
                            return q + ')';
                        });
                        if(ar.length > 0)
                            params.push('|('+qs.join(',') + ')');
                        else params.push(qs[0]);
                   }
                   let orderings = [];
                   const orderList = document.getElementById('order').firstElementChild;
                   orderList._orders.entries().forEach(e=>{
                       [k,v] = e;
                       if(v.selected){
                           orderings.push({property:k, value: v.ascending?'ASC': 'DESC'})
                       }
                   });
                   
                   // Remove leading '&' if present
                    let querystringparam='';
                    let orderstringparam='';
                    if(params.length > 0){
                        querystringparam ='@(nameof(HomepageModel.QueryString))=' + encodeURIComponent('&(' + params.join(',') + ')');
                    } 
                    if(orderings.length > 0){
                        orderstringparam = '@(nameof(HomepageModel.OrderString))=' + encodeURIComponent(orderings.map(p=>`${p.property};${p.value}`).join('&&'))
                    }
                    let url;
                    if(orderings.length ===0 && params.length === 0){
                        url = '/Index';
                    }else url = '/Index?' + querystringparam + '&' + orderstringparam;
                   @if (Model.ViewType == HomepageModel.ViewType_.Page){
                   <text>
                        window.location.replace( url);
                   </text>
                   }
                   else{
                    <text>
                   console.log('Target element exists:', document.querySelector('@(Model.Target)'));
                        htmx.ajax('GET', url + (orderings.length ===0 && params.length ===0?'?':'&')+"@(nameof(HomepageModel.ViewType))=@(Model.ViewType)", {
                            target: '@(Model.Target)',
                            swap: 'innerHTML',
                        });
                    </text>
                   }
               });
            })()
        });
    </script>
    @Html.AntiForgeryToken()
    <input type="hidden" id="categoryIdInput" name="@(nameof(HomepageModel.SearchCategory))"/>
    <div class="d-flex gap-1">
        <div class="input-group rounded-start-2">
            <button hx-get="" hx-trigger="go" id="@(formId)Submit" class="input-group-text rounded-start-2 hover-grow-small border-light-subtle border-1 border-opacity-50 shadow-sm rounded-end-0 btn-primary btn" type="button">
                <i class="bi bi-search m-0" style="font-size: large"></i>
            </button>
            <div class="dropdown my-0">
                <button id="pickerBtn" class="my-0 dropdown-toggle btn btn-outline-light border-opacity-75 border-light border-2 hover-darken shadow-sm text-dark rounded-0" data-bs-toggle="dropdown" data-bs-target="#categoryPicker" aria-expanded="false">Tüm Kategoriler</button>
                <div id="categoryPicker" class="dropdown-menu rounded-bottom-2 border-1">
                    <script>
                        ((s)=>{
                            document.addEventListener("DOMContentLoaded", ()=>{
                                const picker = s.nextElementSibling;
                                picker.addEventListener('change', e=>{
                                    s.parentElement.previousElementSibling.innerHTML = picker.dataset.name;
                                    document.getElementById('categoryIdInput').value = picker.dataset.id === '0'?null:picker.dataset.id;
                                    if(picker.dataset.id==='0') return;
                                    document.getElementById('categoryProperties').setAttribute('hx-vals', JSON.stringify({@Html.Raw("\"categoryId\""): picker.dataset.id}));
                                    htmx.trigger(document.getElementById('categoryProperties'), 'fire')
                                });
                            });
                        })(document.currentScript)
                    </script>
                    @await Html.PartialAsync("Shared/SearchBar/_CategoryPicker", new _CategoryPicker(Model.Categories, rootElementId:Model.Target==null?"searchBarCategoryPicker":Model.Target?.Replace("#","") + "_categoryPicker"){NonSelectionText = "Tüm Kategoriler"})
                </div>
            </div>
            <input id="@(formId)Search" class="rounded-1 rounded-start-0 form-control" type="text" @Html.Raw(Model.Target!=null?$"onchange=\"document.getElementById('{formId}Submit').dispatchEvent(new Event('click', {{cancelable: true, bubbles: true}}))\"":"") value="@null" name="@(nameof(HomepageModel.SearchName))" />
        </div>
        <div class="btn-group justify-content-center mx-1 align-items-center gap-2">
            <button type="button" class="dropdown-toggle btn btn-outline-dark btn-outline-info btn-primary bg-info text-white border-1 border-light border-opacity-50 shadow-sm text-black"  style=":scope:hover{filter: brightness(60%)}" onclick="filterDropdown@(formId).toggle();event.stopImmediatePropagation();">
                Filtreler
            </button>
            <div class="dropdown">
                <button  type="button" id="ordersButton" class="btn btn-outline-light text-dark dropdown-toggle"  
                        data-bs-toggle="dropdown" data-bs-target="#order" aria-expanded="false">Sıralama</button>
                <div id="order" class="dropdown-menu">
                    @await Html.PartialAsync("Shared/SearchBar/_OrderingPartial", new _OrderingPartial())
                </div>
            </div>
        </div>
    </div>
    <div class="dropdown">
        <button type="button" id="filtersButton" role="button" class="dropdown-toggle" data-bs-toggle="dropdown" hidden aria-expanded="false"></button>
        <div id="filters" class="dropdown-menu border-top-0 rounded-2">
            <ul class="list-unstyled gap-0 g-0 bg-white shadow-lg card">
                <li hx-on::after-settle="console.log(event.detail.elt.firstElementChild);event.detail.elt.firstElementChild.dispatchEvent(new Event('init', {bubbles:false}));"
                    id="categoryProperties" hx-get="/@(nameof(Product))?handler=categoryProperties&Type=@(nameof(_CategoryPropertiesPartial.DisplayMode.Filter))&idPrefix=@(nameof(HomepageModel.PropertyFilters))" hx-target="this" hx-swap="innerHTML" hx-trigger="fire">
                </li>
                <li id="ranges" class="border-top-0 m-0 shadow-lg rounded-top-0 bg-gradient-light rounded-3 shadow-lg border-0 p-4 row">
                    <h4 class="fw-bold col-12 mb-3  border-bottom border-info pb-3 fs-5">İstatistik Özellikleri</h4>
                    <div class="col-6 gap-1">
                        <div class="form-label fw-semibold text-dark mb-2">
                            Satılma Sayısı
                        </div>
                        <div id="saleCountRange">
                            @await Html.PartialAsync("Shared/SearchBar/_SliderPartial", new _SliderPartial(){
                                MaxValue = 1000000,
                                MinValue = 0,
                                InputName = string.Join('_', nameof(Entity.Product.Stats), nameof(ProductStats.SaleCount)),
                            })
                        </div>
                    </div>
                    <div class="col-6 gap-1">
                        <div class="form-label fw-semibold text-dark mb-2">İade Sayısı</div>
                        <div id="refundCountRange">
                            @await Html.PartialAsync("Shared/SearchBar/_SliderPartial", new _SliderPartial(){
                                MaxValue = 1000000,
                                MinValue = 0,
                                InputName = string.Join('_', nameof(Entity.Product.Stats), nameof(ProductStats.RefundCount)),
                            })
                        </div>
                    </div>
                    <div class="col-6 gap-1">
                        <div class="form-label fw-semibold text-dark mb-2">
                            Favorilere Eklenme Sayısı
                        </div>
                        <div id="favoriteRange">
                            <input type="hidden" name=""/>
                            @await Html.PartialAsync("Shared/SearchBar/_SliderPartial", new _SliderPartial(){
                                MaxValue = 1000000,
                                MinValue = 0,
                                InputName = string.Join('_', nameof(Entity.Product.Stats), nameof(ProductStats.FavorCount)),
                            })
                        </div>
                    </div>
                    <div class="col-6 gap-1">
                        <div class="form-label fw-semibold text-dark mb-2">
                            Değerlendirme Sayısı
                        </div>
                        <div id="ratingCountRange">
                            @await Html.PartialAsync("Shared/SearchBar/_SliderPartial", new _SliderPartial(){
                                MaxValue = 1000000,
                                MinValue = 0,
                                InputName = string.Join('_', nameof(Entity.Product.Stats), nameof(ProductStats.ReviewCount)),
                            })
                        </div>
                    </div>
                    <div class="col-6 gap-1">
                        <label class="form-label fw-semibold text-dark mb-2">
                            Değerlendirme Ortalaması
                        </label>
                        <div id="ratingRange">
                            @await Html.PartialAsync("Shared/SearchBar/_SliderPartial", new _SliderPartial(){
                                MinValue = 0,
                                MaxValue = 5,
                                Step = "0.1",
                                InputName = string.Join('_', nameof(Entity.Product.Stats), nameof(ProductStats.RatingAverage)),
                            })
                        </div>
                    </div>
                    <div class="col-6 gap-1">
                        <label class="form-label fw-semibold text-dark mb-2">Fiyat</label>
                        <div id="priceRange">
                            @await Html.PartialAsync("Shared/SearchBar/_SliderPartial", new _SliderPartial(){
                                MaxValue = 1000000, MinValue = 0,
                                Step = "0.1",
                                InputName = string.Join('_', nameof(Entity.Product.Stats), nameof(ProductStats.MinPrice)),
                            })
                        </div>
                    </div>
                </li>
            </ul>
        </div>
    </div>
</div>
